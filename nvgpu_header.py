# AUTOGENERATED: DO NOT EDIT
# Last update date: 2022-08-08 16:14:54.151382

from ctypes import *
from utils import *


libc = CDLL('libc.so.6')
ioctl = libc.ioctl
NVGPU_GPU_IOCTL_MAGIC: int = 0x47
NVGPU_ZBC_COLOR_VALUE_SIZE: int = 0x4
NVGPU_ZBC_TYPE_INVALID: int = 0x0
NVGPU_ZBC_TYPE_COLOR: int = 0x1
NVGPU_ZBC_TYPE_DEPTH: int = 0x2
NVGPU_GPU_ARCH_GK100: int = 0xE0
NVGPU_GPU_ARCH_GM200: int = 0x120
NVGPU_GPU_ARCH_GP100: int = 0x130
NVGPU_GPU_ARCH_GV110: int = 0x150
NVGPU_GPU_ARCH_GV100: int = 0x140
NVGPU_GPU_IMPL_GK20A: int = 0xA
NVGPU_GPU_IMPL_GM204: int = 0x4
NVGPU_GPU_IMPL_GM206: int = 0x6
NVGPU_GPU_IMPL_GM20B: int = 0xB
NVGPU_GPU_IMPL_GM20B_B: int = 0xE
NVGPU_GPU_IMPL_GP104: int = 0x4
NVGPU_GPU_IMPL_GP106: int = 0x6
NVGPU_GPU_IMPL_GP10B: int = 0xB
NVGPU_GPU_IMPL_GV11B: int = 0xB
NVGPU_GPU_IMPL_GV100: int = 0x0
NVGPU_GPU_BUS_TYPE_NONE: int = 0x0
NVGPU_GPU_BUS_TYPE_AXI: int = 0x20
NVGPU_GPU_FLAGS_HAS_SYNCPOINTS: int = 0x1
NVGPU_GPU_FLAGS_SUPPORT_PARTIAL_MAPPINGS: int = 0x2
NVGPU_GPU_FLAGS_SUPPORT_SPARSE_ALLOCS: int = 0x4
NVGPU_GPU_FLAGS_SUPPORT_SYNC_FENCE_FDS: int = 0x8
NVGPU_GPU_FLAGS_SUPPORT_CYCLE_STATS: int = 0x10
NVGPU_GPU_FLAGS_SUPPORT_CYCLE_STATS_SNAPSHOT: int = 0x40
NVGPU_GPU_FLAGS_SUPPORT_USERSPACE_MANAGED_AS: int = 0x80
NVGPU_GPU_FLAGS_SUPPORT_TSG: int = 0x100
NVGPU_GPU_FLAGS_SUPPORT_CLOCK_CONTROLS: int = 0x200
NVGPU_GPU_FLAGS_SUPPORT_GET_VOLTAGE: int = 0x400
NVGPU_GPU_FLAGS_SUPPORT_GET_CURRENT: int = 0x800
NVGPU_GPU_FLAGS_SUPPORT_GET_POWER: int = 0x1000
NVGPU_GPU_FLAGS_SUPPORT_GET_TEMPERATURE: int = 0x2000
NVGPU_GPU_FLAGS_SUPPORT_SET_THERM_ALERT_LIMIT: int = 0x4000
NVGPU_GPU_FLAGS_SUPPORT_DEVICE_EVENTS: int = 0x8000
NVGPU_GPU_FLAGS_SUPPORT_FECS_CTXSW_TRACE: int = 0x10000
NVGPU_GPU_FLAGS_SUPPORT_MAP_COMPBITS: int = 0x20000
NVGPU_GPU_FLAGS_SUPPORT_DETERMINISTIC_SUBMIT_NO_JOBTRACKING: int = 0x40000
NVGPU_GPU_FLAGS_SUPPORT_DETERMINISTIC_SUBMIT_FULL: int = 0x80000
NVGPU_GPU_FLAGS_SUPPORT_IO_COHERENCE: int = 0x100000
NVGPU_GPU_FLAGS_SUPPORT_RESCHEDULE_RUNLIST: int = 0x200000
NVGPU_GPU_FLAGS_SUPPORT_TSG_SUBCONTEXTS: int = 0x400000
NVGPU_GPU_FLAGS_SUPPORT_MAP_DIRECT_KIND_CTRL: int = 0x800000
NVGPU_GPU_FLAGS_SUPPORT_DETERMINISTIC_OPTS: int = 0x1000000
NVGPU_GPU_FLAGS_SUPPORT_SCG: int = 0x2000000
NVGPU_GPU_FLAGS_SUPPORT_SYNCPOINT_ADDRESS: int = 0x4000000
NVGPU_GPU_FLAGS_SUPPORT_VPR: int = 0x8000000
NVGPU_GPU_FLAGS_SUPPORT_USER_SYNCPOINT: int = 0x10000000
NVGPU_GPU_FLAGS_CAN_RAILGATE: int = 0x20000000
NVGPU_GPU_FLAGS_SUPPORT_USERMODE_SUBMIT: int = 0x40000000
NVGPU_GPU_FLAGS_SUPPORT_SET_CTX_MMU_DEBUG_MODE: int = 0x100000000
NVGPU_GPU_FLAGS_ECC_ENABLED_SM_LRF: int = 0x1000000000000000
NVGPU_GPU_FLAGS_ECC_ENABLED_SM_SHM: int = 0x2000000000000000
NVGPU_GPU_FLAGS_ECC_ENABLED_TEX: int = 0x4000000000000000
NVGPU_GPU_FLAGS_ECC_ENABLED_LTC: int = 0x8000000000000000
NVGPU_GPU_COMPBITS_NONE: int = 0x0
NVGPU_GPU_COMPBITS_GPU: int = 0x1
NVGPU_GPU_COMPBITS_CDEH: int = 0x2
NVGPU_GPU_COMPBITS_CDEV: int = 0x4
NVGPU_GPU_IOCTL_ALLOC_AS_FLAGS_USERSPACE_MANAGED: int = 0x1
NVGPU_GPU_GET_CPU_TIME_CORRELATION_INFO_MAX_COUNT: int = 0x10
NVGPU_GPU_GET_CPU_TIME_CORRELATION_INFO_SRC_ID_TSC: int = 0x1
NVGPU_GPU_ENGINE_ID_GR: int = 0x0
NVGPU_GPU_ENGINE_ID_GR_COPY: int = 0x1
NVGPU_GPU_ENGINE_ID_ASYNC_COPY: int = 0x2
NVGPU_GPU_ALLOC_VIDMEM_FLAG_CONTIGUOUS: int = 0x1
NVGPU_GPU_ALLOC_VIDMEM_FLAG_CPU_NOT_MAPPABLE: int = 0x0
NVGPU_GPU_ALLOC_VIDMEM_FLAG_CPU_WRITE_COMBINE: int = 0x2
NVGPU_GPU_ALLOC_VIDMEM_FLAG_CPU_CACHED: int = 0x4
NVGPU_GPU_ALLOC_VIDMEM_FLAG_CPU_MASK: int = 0xE
NVGPU_GPU_ALLOC_VIDMEM_FLAG_VPR: int = 0x10
NVGPU_GPU_CLK_DOMAIN_MCLK: int = 0x0
NVGPU_GPU_CLK_DOMAIN_GPCCLK: int = 0x1
NVGPU_GPU_CLK_FLAG_SPECIFIC_DOMAINS: int = 0x1
NVGPU_GPU_CLK_TYPE_TARGET: int = 0x1
NVGPU_GPU_CLK_TYPE_ACTUAL: int = 0x2
NVGPU_GPU_CLK_TYPE_EFFECTIVE: int = 0x3
NVGPU_GPU_VOLTAGE_CORE: int = 0x1
NVGPU_GPU_VOLTAGE_SRAM: int = 0x2
NVGPU_GPU_VOLTAGE_BUS: int = 0x3
NVGPU_GPU_SET_DETERMINISTIC_OPTS_FLAGS_ALLOW_RAILGATING: int = 0x1
NVGPU_GPU_SET_DETERMINISTIC_OPTS_FLAGS_DISALLOW_RAILGATING: int = 0x2
NVGPU_EVENT_IOCTL_MAGIC: int = 0x45
NVGPU_GPU_EVENT_VF_UPDATE: int = 0x0
NVGPU_GPU_EVENT_ALARM_TARGET_VF_NOT_POSSIBLE: int = 0x1
NVGPU_GPU_EVENT_ALARM_LOCAL_TARGET_VF_NOT_POSSIBLE: int = 0x2
NVGPU_GPU_EVENT_ALARM_CLOCK_ARBITER_FAILED: int = 0x3
NVGPU_GPU_EVENT_ALARM_VF_TABLE_UPDATE_FAILED: int = 0x4
NVGPU_GPU_EVENT_ALARM_THERMAL_ABOVE_THRESHOLD: int = 0x5
NVGPU_GPU_EVENT_ALARM_POWER_ABOVE_THRESHOLD: int = 0x6
NVGPU_GPU_EVENT_ALARM_GPU_LOST: int = 0x7
NVGPU_GPU_EVENT_LAST: int = 0x7
NVGPU_TSG_IOCTL_MAGIC: int = 0x54
NVGPU_DBG_GPU_IOCTL_MAGIC: int = 0x44
NVGPU_DBG_GPU_REG_OP_READ_32: int = 0x0
NVGPU_DBG_GPU_REG_OP_WRITE_32: int = 0x1
NVGPU_DBG_GPU_REG_OP_READ_64: int = 0x2
NVGPU_DBG_GPU_REG_OP_WRITE_64: int = 0x3
NVGPU_DBG_GPU_REG_OP_READ_08: int = 0x4
NVGPU_DBG_GPU_REG_OP_WRITE_08: int = 0x5
NVGPU_DBG_GPU_REG_OP_TYPE_GLOBAL: int = 0x0
NVGPU_DBG_GPU_REG_OP_TYPE_GR_CTX: int = 0x1
NVGPU_DBG_GPU_REG_OP_TYPE_GR_CTX_TPC: int = 0x2
NVGPU_DBG_GPU_REG_OP_TYPE_GR_CTX_SM: int = 0x4
NVGPU_DBG_GPU_REG_OP_TYPE_GR_CTX_CROP: int = 0x8
NVGPU_DBG_GPU_REG_OP_TYPE_GR_CTX_ZROP: int = 0x10
NVGPU_DBG_GPU_REG_OP_TYPE_GR_CTX_QUAD: int = 0x40
NVGPU_DBG_GPU_REG_OP_STATUS_SUCCESS: int = 0x0
NVGPU_DBG_GPU_REG_OP_STATUS_INVALID_OP: int = 0x1
NVGPU_DBG_GPU_REG_OP_STATUS_INVALID_TYPE: int = 0x2
NVGPU_DBG_GPU_REG_OP_STATUS_INVALID_OFFSET: int = 0x4
NVGPU_DBG_GPU_REG_OP_STATUS_UNSUPPORTED_OP: int = 0x8
NVGPU_DBG_GPU_REG_OP_STATUS_INVALID_MASK: int = 0x10
NVGPU_DBG_GPU_EVENTS_CTRL_CMD_DISABLE: int = 0x0
NVGPU_DBG_GPU_EVENTS_CTRL_CMD_ENABLE: int = 0x1
NVGPU_DBG_GPU_EVENTS_CTRL_CMD_CLEAR: int = 0x2
NVGPU_DBG_GPU_POWERGATE_MODE_ENABLE: int = 0x1
NVGPU_DBG_GPU_POWERGATE_MODE_DISABLE: int = 0x2
NVGPU_DBG_GPU_SMPC_CTXSW_MODE_NO_CTXSW: int = 0x0
NVGPU_DBG_GPU_SMPC_CTXSW_MODE_CTXSW: int = 0x1
NVGPU_DBG_GPU_SUSPEND_ALL_SMS: int = 0x1
NVGPU_DBG_GPU_RESUME_ALL_SMS: int = 0x2
NVGPU_DBG_GPU_IOCTL_PC_SAMPLING_DISABLE: int = 0x0
NVGPU_DBG_GPU_IOCTL_PC_SAMPLING_ENABLE: int = 0x1
NVGPU_DBG_GPU_IOCTL_TIMEOUT_ENABLE: int = 0x1
NVGPU_DBG_GPU_IOCTL_TIMEOUT_DISABLE: int = 0x0
NVGPU_DBG_GPU_HWPM_CTXSW_MODE_NO_CTXSW: int = 0x0
NVGPU_DBG_GPU_HWPM_CTXSW_MODE_CTXSW: int = 0x1
NVGPU_DBG_GPU_HWPM_CTXSW_MODE_STREAM_OUT_CTXSW: int = 0x2
NVGPU_DBG_GPU_SUSPEND_ALL_CONTEXTS: int = 0x1
NVGPU_DBG_GPU_RESUME_ALL_CONTEXTS: int = 0x2
NVGPU_DBG_GPU_IOCTL_ACCESS_FB_MEMORY_CMD_READ: int = 0x1
NVGPU_DBG_GPU_IOCTL_ACCESS_FB_MEMORY_CMD_WRITE: int = 0x2
NVGPU_DBG_GPU_IOCTL_SET_SM_EXCEPTION_TYPE_MASK_NONE: int = 0x0
NVGPU_DBG_GPU_IOCTL_SET_SM_EXCEPTION_TYPE_MASK_FATAL: int = 0x1
NVGPU_DBG_GPU_IOCTL_CYCLE_STATS_SNAPSHOT_CMD_FLUSH: int = 0x0
NVGPU_DBG_GPU_IOCTL_CYCLE_STATS_SNAPSHOT_CMD_ATTACH: int = 0x1
NVGPU_DBG_GPU_IOCTL_CYCLE_STATS_SNAPSHOT_CMD_DETACH: int = 0x2
NVGPU_DBG_GPU_CTX_MMU_DEBUG_MODE_DISABLED: int = 0x0
NVGPU_DBG_GPU_CTX_MMU_DEBUG_MODE_ENABLED: int = 0x1
NVGPU_IOCTL_MAGIC: int = 0x48
NVGPU_TIMEOUT_FLAG_DISABLE_DUMP: int = 0x0
NVGPU_ALLOC_OBJ_FLAGS_LOCKBOOST_ZERO: int = 0x1
NVGPU_ALLOC_OBJ_FLAGS_GFXP: int = 0x2
NVGPU_ALLOC_OBJ_FLAGS_CILP: int = 0x4
NVGPU_ALLOC_GPFIFO_FLAGS_VPR_ENABLED: int = 0x1
NVGPU_ALLOC_GPFIFO_FLAGS_REPLAYABLE_FAULTS_ENABLE: int = 0x4
NVGPU_ALLOC_GPFIFO_EX_FLAGS_VPR_ENABLED: int = 0x1
NVGPU_ALLOC_GPFIFO_EX_FLAGS_DETERMINISTIC: int = 0x2
NVGPU_CHANNEL_SETUP_BIND_FLAGS_VPR_ENABLED: int = 0x1
NVGPU_CHANNEL_SETUP_BIND_FLAGS_DETERMINISTIC: int = 0x2
NVGPU_CHANNEL_SETUP_BIND_FLAGS_REPLAYABLE_FAULTS_ENABLE: int = 0x4
NVGPU_CHANNEL_SETUP_BIND_FLAGS_USERMODE_SUPPORT: int = 0x8
NVGPU_SUBMIT_GPFIFO_FLAGS_FENCE_WAIT: int = 0x1
NVGPU_SUBMIT_GPFIFO_FLAGS_FENCE_GET: int = 0x2
NVGPU_SUBMIT_GPFIFO_FLAGS_HW_FORMAT: int = 0x4
NVGPU_SUBMIT_GPFIFO_FLAGS_SYNC_FENCE: int = 0x8
NVGPU_SUBMIT_GPFIFO_FLAGS_SUPPRESS_WFI: int = 0x10
NVGPU_SUBMIT_GPFIFO_FLAGS_SKIP_BUFFER_REFCOUNTING: int = 0x20
NVGPU_WAIT_TYPE_NOTIFIER: int = 0x0
NVGPU_WAIT_TYPE_SEMAPHORE: int = 0x1
NVGPU_ZCULL_MODE_GLOBAL: int = 0x0
NVGPU_ZCULL_MODE_NO_CTXSW: int = 0x1
NVGPU_ZCULL_MODE_SEPARATE_BUFFER: int = 0x2
NVGPU_ZCULL_MODE_PART_OF_REGULAR_BUF: int = 0x3
NVGPU_CHANNEL_FIFO_ERROR_IDLE_TIMEOUT: int = 0x8
NVGPU_CHANNEL_GR_ERROR_SW_METHOD: int = 0xC
NVGPU_CHANNEL_GR_ERROR_SW_NOTIFY: int = 0xD
NVGPU_CHANNEL_GR_EXCEPTION: int = 0xD
NVGPU_CHANNEL_GR_SEMAPHORE_TIMEOUT: int = 0x18
NVGPU_CHANNEL_GR_ILLEGAL_NOTIFY: int = 0x19
NVGPU_CHANNEL_FIFO_ERROR_MMU_ERR_FLT: int = 0x1F
NVGPU_CHANNEL_PBDMA_ERROR: int = 0x20
NVGPU_CHANNEL_FECS_ERR_UNIMP_FIRMWARE_METHOD: int = 0x25
NVGPU_CHANNEL_RESETCHANNEL_VERIF_ERROR: int = 0x2B
NVGPU_CHANNEL_PBDMA_PUSHBUFFER_CRC_MISMATCH: int = 0x50
NVGPU_CHANNEL_SUBMIT_TIMEOUT: int = 0x1
NVGPU_IOCTL_CHANNEL_DISABLE_WDT: int = 0x1
NVGPU_IOCTL_CHANNEL_ENABLE_WDT: int = 0x2
NVGPU_IOCTL_CHANNEL_WDT_FLAG_SET_TIMEOUT: int = 0x4
NVGPU_IOCTL_CHANNEL_WDT_FLAG_DISABLE_DUMP: int = 0x8
NVGPU_RUNLIST_INTERLEAVE_LEVEL_LOW: int = 0x0
NVGPU_RUNLIST_INTERLEAVE_LEVEL_MEDIUM: int = 0x1
NVGPU_RUNLIST_INTERLEAVE_LEVEL_HIGH: int = 0x2
NVGPU_RUNLIST_INTERLEAVE_NUM_LEVELS: int = 0x3
NVGPU_IOCTL_CHANNEL_EVENT_ID_BPT_INT: int = 0x0
NVGPU_IOCTL_CHANNEL_EVENT_ID_BPT_PAUSE: int = 0x1
NVGPU_IOCTL_CHANNEL_EVENT_ID_BLOCKING_SYNC: int = 0x2
NVGPU_IOCTL_CHANNEL_EVENT_ID_CILP_PREEMPTION_STARTED: int = 0x3
NVGPU_IOCTL_CHANNEL_EVENT_ID_CILP_PREEMPTION_COMPLETE: int = 0x4
NVGPU_IOCTL_CHANNEL_EVENT_ID_GR_SEMAPHORE_WRITE_AWAKEN: int = 0x5
NVGPU_IOCTL_CHANNEL_EVENT_ID_MAX: int = 0x6
NVGPU_IOCTL_CHANNEL_EVENT_ID_CMD_ENABLE: int = 0x1
NVGPU_GRAPHICS_PREEMPTION_MODE_WFI: int = 0x1
NVGPU_GRAPHICS_PREEMPTION_MODE_GFXP: int = 0x2
NVGPU_COMPUTE_PREEMPTION_MODE_WFI: int = 0x1
NVGPU_COMPUTE_PREEMPTION_MODE_CTA: int = 0x2
NVGPU_COMPUTE_PREEMPTION_MODE_CILP: int = 0x4
NVGPU_BOOSTED_CTX_MODE_NORMAL: int = 0x0
NVGPU_BOOSTED_CTX_MODE_BOOSTED_EXECUTION: int = 0x1
NVGPU_RESCHEDULE_RUNLIST_PREEMPT_NEXT: int = 0x1
NVGPU_AS_IOCTL_MAGIC: int = 0x41
NVGPU_AS_ALLOC_SPACE_FLAGS_FIXED_OFFSET: int = 0x1
NVGPU_AS_ALLOC_SPACE_FLAGS_SPARSE: int = 0x2
NVGPU_AS_MAP_BUFFER_FLAGS_FIXED_OFFSET: int = 0x1
NVGPU_AS_MAP_BUFFER_FLAGS_CACHEABLE: int = 0x4
NVGPU_AS_MAP_BUFFER_FLAGS_IO_COHERENT: int = 0x10
NVGPU_AS_MAP_BUFFER_FLAGS_UNMAPPED_PTE: int = 0x20
NVGPU_AS_MAP_BUFFER_FLAGS_MAPPABLE_COMPBITS: int = 0x40
NVGPU_AS_MAP_BUFFER_FLAGS_L3_ALLOC: int = 0x80
NVGPU_AS_MAP_BUFFER_FLAGS_DIRECT_KIND_CTRL: int = 0x100
NVGPU_AS_MAP_BUFFER_FLAGS_PLATFORM_ATOMIC: int = 0x200
NVGPU_AS_GET_BUFFER_COMPBITS_INFO_FLAGS_HAS_COMPBITS: int = 0x1
NVGPU_AS_GET_BUFFER_COMPBITS_INFO_FLAGS_MAPPABLE: int = 0x2
NVGPU_AS_GET_BUFFER_COMPBITS_INFO_FLAGS_DISCONTIG_IOVA: int = 0x4
NVGPU_AS_MAP_BUFFER_COMPBITS_FLAGS_FIXED_OFFSET: int = 0x1
NVGPU_CTXSW_IOCTL_MAGIC: int = 0x43
NVGPU_CTXSW_TAG_SOF: int = 0x0
NVGPU_CTXSW_TAG_CTXSW_REQ_BY_HOST: int = 0x1
NVGPU_CTXSW_TAG_FE_ACK: int = 0x2
NVGPU_CTXSW_TAG_FE_ACK_WFI: int = 0xA
NVGPU_CTXSW_TAG_FE_ACK_GFXP: int = 0xB
NVGPU_CTXSW_TAG_FE_ACK_CTAP: int = 0xC
NVGPU_CTXSW_TAG_FE_ACK_CILP: int = 0xD
NVGPU_CTXSW_TAG_SAVE_END: int = 0x3
NVGPU_CTXSW_TAG_RESTORE_START: int = 0x4
NVGPU_CTXSW_TAG_CONTEXT_START: int = 0x5
NVGPU_CTXSW_TAG_ENGINE_RESET: int = 0xFE
NVGPU_CTXSW_TAG_INVALID_TIMESTAMP: int = 0xFF
NVGPU_CTXSW_TAG_LAST: int = 0xFF
NVGPU_CTXSW_RING_HEADER_MAGIC: int = 0x7000FADE
NVGPU_CTXSW_RING_HEADER_VERSION: int = 0x0
NVGPU_SCHED_IOCTL_MAGIC: int = 0x53
NVGPU_SCHED_STATUS_TSG_OPEN: int = 0x1
NVGPU_SCHED_API_VERSION: int = 0x1






class nvgpu_gpu_zcull_get_ctx_size_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("size", c_uint),
    ]


class nvgpu_gpu_zcull_get_info_args(Structure):
    _fields_ = [
        ("width_align_pixels", c_uint),
        ("height_align_pixels", c_uint),
        ("pixel_squares_by_aliquots", c_uint),
        ("aliquot_total", c_uint),
        ("region_byte_multiplier", c_uint),
        ("region_header_size", c_uint),
        ("subregion_header_size", c_uint),
        ("subregion_width_align_pixels", c_uint),
        ("subregion_height_align_pixels", c_uint),
        ("subregion_count", c_uint),
    ]


class nvgpu_gpu_zbc_set_table_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("color_ds", c_uint * 4),
        ("color_l2", c_uint * 4),
        ("depth", c_uint),
        ("format", c_uint),
        ("type", c_uint),
    ]


class nvgpu_gpu_zbc_query_table_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("color_ds", c_uint * 4),
        ("color_l2", c_uint * 4),
        ("depth", c_uint),
        ("ref_cnt", c_uint),
        ("format", c_uint),
        ("type", c_uint),
        ("index_size", c_uint),
    ]


class nvgpu_gpu_characteristics(Structure):
    _fields_ = [
        ("arch", c_uint),
        ("impl", c_uint),
        ("rev", c_uint),
        ("num_gpc", c_uint),
        ("L2_cache_size", c_ulong),
        ("on_board_video_memory_size", c_ulong),
        ("num_tpc_per_gpc", c_uint),
        ("bus_type", c_uint),
        ("big_page_size", c_uint),
        ("compression_page_size", c_uint),
        ("pde_coverage_bit_count", c_uint),
        ("available_big_page_sizes", c_uint),
        ("flags", c_ulong),
        ("twod_class", c_uint),
        ("threed_class", c_uint),
        ("compute_class", c_uint),
        ("gpfifo_class", c_uint),
        ("inline_to_memory_class", c_uint),
        ("dma_copy_class", c_uint),
        ("gpc_mask", c_uint),
        ("sm_arch_sm_version", c_uint),
        ("sm_arch_spa_version", c_uint),
        ("sm_arch_warp_count", c_uint),
        ("gpu_ioctl_nr_last", c_short),
        ("tsg_ioctl_nr_last", c_short),
        ("dbg_gpu_ioctl_nr_last", c_short),
        ("ioctl_channel_nr_last", c_short),
        ("as_ioctl_nr_last", c_short),
        ("gpu_va_bit_count", c_ubyte),
        ("reserved", c_ubyte),
        ("max_fbps_count", c_uint),
        ("fbp_en_mask", c_uint),
        ("max_ltc_per_fbp", c_uint),
        ("max_lts_per_ltc", c_uint),
        ("max_tex_per_tpc", c_uint),
        ("max_gpc_count", c_uint),
        ("rop_l2_en_mask_DEPRECATED", c_uint * 2),
        ("chipname", c_ubyte * 8),
        ("gr_compbit_store_base_hw", c_ulong),
        ("gr_gobs_per_comptagline_per_slice", c_uint),
        ("num_ltc", c_uint),
        ("lts_per_ltc", c_uint),
        ("cbc_cache_line_size", c_uint),
        ("cbc_comptags_per_line", c_uint),
        ("map_buffer_batch_limit", c_uint),
        ("max_freq", c_ulong),
        ("graphics_preemption_mode_flags", c_uint),
        ("compute_preemption_mode_flags", c_uint),
        ("default_graphics_preempt_mode", c_uint),
        ("default_compute_preempt_mode", c_uint),
        ("local_video_memory_size", c_ulong),
        ("pci_vendor_id", c_ushort),
        ("pci_device_id", c_ushort),
        ("pci_subsystem_vendor_id", c_ushort),
        ("pci_subsystem_device_id", c_ushort),
        ("pci_class", c_ushort),
        ("pci_revision", c_ubyte),
        ("vbios_oem_version", c_ubyte),
        ("vbios_version", c_uint),
        ("reg_ops_limit", c_uint),
        ("reserved1", c_uint),
        ("event_ioctl_nr_last", c_short),
        ("pad", c_ushort),
        ("max_css_buffer_size", c_uint),
    ]


class nvgpu_gpu_get_characteristics(Structure):
    _fields_ = [
        ("gpu_characteristics_buf_size", c_ulong),
        ("gpu_characteristics_buf_addr", c_ulong),
    ]


class nvgpu_gpu_prepare_compressible_read_args_unamed_union_1(Union):
    _fields_ = [
        ("request_compbits", c_uint),
        ("valid_compbits", c_uint),
    ]


class nvgpu_gpu_prepare_compressible_read_args_unamed_union_9_unamed_struct_0(Structure):
    _fields_ = [
        ("syncpt_id", c_uint),
        ("syncpt_value", c_uint),
    ]


class nvgpu_gpu_prepare_compressible_read_args_unamed_union_9(Union):
    _fields_ = [
        ("unamed_field0", nvgpu_gpu_prepare_compressible_read_args_unamed_union_9_unamed_struct_0),
        ("fd", c_int),
    ]


class nvgpu_gpu_prepare_compressible_read_args(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("unamed_field0", nvgpu_gpu_prepare_compressible_read_args_unamed_union_1),
        ("offset", c_ulong),
        ("compbits_hoffset", c_ulong),
        ("compbits_voffset", c_ulong),
        ("width", c_uint),
        ("height", c_uint),
        ("block_height_log2", c_uint),
        ("submit_flags", c_uint),
        ("fence", nvgpu_gpu_prepare_compressible_read_args_unamed_union_9),
        ("zbc_color", c_uint),
        ("reserved", c_uint),
        ("scatterbuffer_offset", c_ulong),
        ("reserved2", c_uint * 2),
    ]


class nvgpu_gpu_mark_compressible_write_args(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("valid_compbits", c_uint),
        ("offset", c_ulong),
        ("zbc_color", c_uint),
        ("reserved", c_uint * 3),
    ]


class nvgpu_alloc_as_args(Structure):
    _fields_ = [
        ("big_page_size", c_uint),
        ("as_fd", c_int),
        ("flags", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_gpu_open_tsg_args(Structure):
    _fields_ = [
        ("tsg_fd", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_gpu_get_tpc_masks_args(Structure):
    _fields_ = [
        ("mask_buf_size", c_uint),
        ("reserved", c_uint),
        ("mask_buf_addr", c_ulong),
    ]


class nvgpu_gpu_open_channel_args_unamed_union_0_unamed_struct_1(Structure):
    _fields_ = [
        ("runlist_id", c_int),
    ]


class nvgpu_gpu_open_channel_args_unamed_union_0_unamed_struct_2(Structure):
    _fields_ = [
        ("channel_fd", c_int),
    ]


class nvgpu_gpu_open_channel_args_unamed_union_0(Union):
    _fields_ = [
        ("channel_fd", c_int),
        ("in", nvgpu_gpu_open_channel_args_unamed_union_0_unamed_struct_1),
        ("out", nvgpu_gpu_open_channel_args_unamed_union_0_unamed_struct_2),
    ]


class nvgpu_gpu_open_channel_args(Structure):
    _fields_ = [
        ("unamed_field0", nvgpu_gpu_open_channel_args_unamed_union_0),
    ]


class nvgpu_gpu_l2_fb_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("l2_flush", c_uint),
        ("l2_invalidate", c_uint),
        ("fb_flush", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_gpu_mmu_debug_mode_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("state", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_gpu_sm_debug_mode_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("channel_fd", c_int),
        ("enable", c_uint),
        ("sms", c_ulong),
    ]


class warpstate(Structure):
    _fields_ = [
        ("valid_warps", c_ulong * 2),
        ("trapped_warps", c_ulong * 2),
        ("paused_warps", c_ulong * 2),
    ]


class nvgpu_gpu_wait_pause_args(Structure):
    _fields_ = [
        ("pwarpstate", c_ulong),
    ]


class nvgpu_gpu_tpc_exception_en_status_args(Structure):
    _fields_ = [
        ("tpc_exception_en_sm_mask", c_ulong),
    ]


class nvgpu_gpu_num_vsms(Structure):
    _fields_ = [
        ("num_vsms", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_gpu_vsms_mapping_entry(Structure):
    _fields_ = [
        ("gpc_index", c_ubyte),
        ("tpc_index", c_ubyte),
    ]


class nvgpu_gpu_vsms_mapping(Structure):
    _fields_ = [
        ("vsms_map_buf_addr", c_ulong),
    ]


class nvgpu_gpu_get_buffer_info_args_unamed_union_0_unamed_struct_0(Structure):
    _fields_ = [
        ("dmabuf_fd", c_uint),
    ]


class nvgpu_gpu_get_buffer_info_args_unamed_union_0_unamed_struct_1(Structure):
    _fields_ = [
        ("id", c_ulong),
        ("length", c_ulong),
        ("reserved0", c_ulong),
        ("reserved1", c_ulong),
    ]


class nvgpu_gpu_get_buffer_info_args_unamed_union_0(Union):
    _fields_ = [
        ("in", nvgpu_gpu_get_buffer_info_args_unamed_union_0_unamed_struct_0),
        ("out", nvgpu_gpu_get_buffer_info_args_unamed_union_0_unamed_struct_1),
    ]


class nvgpu_gpu_get_buffer_info_args(Structure):
    _fields_ = [
        ("unamed_field0", nvgpu_gpu_get_buffer_info_args_unamed_union_0),
    ]


class nvgpu_gpu_get_cpu_time_correlation_sample(Structure):
    _fields_ = [
        ("cpu_timestamp", c_ulong),
        ("gpu_timestamp", c_ulong),
    ]


class nvgpu_gpu_get_cpu_time_correlation_info_args(Structure):
    _fields_ = [
        ("samples", nvgpu_gpu_get_cpu_time_correlation_sample * 16),
        ("count", c_uint),
        ("source_id", c_uint),
    ]


class nvgpu_gpu_get_gpu_time_args(Structure):
    _fields_ = [
        ("gpu_timestamp", c_ulong),
        ("reserved", c_ulong),
    ]


class nvgpu_gpu_get_engine_info_item(Structure):
    _fields_ = [
        ("engine_id", c_uint),
        ("engine_instance", c_uint),
        ("runlist_id", c_int),
        ("reserved", c_uint),
    ]


class nvgpu_gpu_get_engine_info_args(Structure):
    _fields_ = [
        ("engine_info_buf_size", c_uint),
        ("reserved", c_uint),
        ("engine_info_buf_addr", c_ulong),
    ]


class nvgpu_gpu_alloc_vidmem_args_unamed_union_0_unamed_struct_0(Structure):
    _fields_ = [
        ("size", c_ulong),
        ("flags", c_uint),
        ("memtag", c_ushort),
        ("reserved0", c_ushort),
        ("alignment", c_uint),
        ("reserved1", c_uint * 3),
    ]


class nvgpu_gpu_alloc_vidmem_args_unamed_union_0_unamed_struct_1(Structure):
    _fields_ = [
        ("dmabuf_fd", c_int),
    ]


class nvgpu_gpu_alloc_vidmem_args_unamed_union_0(Union):
    _fields_ = [
        ("in", nvgpu_gpu_alloc_vidmem_args_unamed_union_0_unamed_struct_0),
        ("out", nvgpu_gpu_alloc_vidmem_args_unamed_union_0_unamed_struct_1),
    ]


class nvgpu_gpu_alloc_vidmem_args(Structure):
    _fields_ = [
        ("unamed_field0", nvgpu_gpu_alloc_vidmem_args_unamed_union_0),
    ]


class nvgpu_gpu_clk_range(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("clk_domain", c_uint),
        ("min_hz", c_ulong),
        ("max_hz", c_ulong),
    ]


class nvgpu_gpu_clk_range_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("pad0", c_ushort),
        ("num_entries", c_ushort),
        ("clk_range_entries", c_ulong),
    ]


class nvgpu_gpu_clk_vf_point(Structure):
    _fields_ = [
        ("freq_hz", c_ulong),
    ]


class nvgpu_gpu_clk_vf_points_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("clk_domain", c_uint),
        ("max_entries", c_ushort),
        ("num_entries", c_ushort),
        ("reserved", c_uint),
        ("clk_vf_point_entries", c_ulong),
    ]


class nvgpu_gpu_clk_info(Structure):
    _fields_ = [
        ("flags", c_ushort),
        ("clk_type", c_ushort),
        ("clk_domain", c_uint),
        ("freq_hz", c_ulong),
    ]


class nvgpu_gpu_clk_get_info_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("clk_type", c_ushort),
        ("num_entries", c_ushort),
        ("clk_info_entries", c_ulong),
    ]


class nvgpu_gpu_clk_set_info_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("pad0", c_ushort),
        ("num_entries", c_ushort),
        ("clk_info_entries", c_ulong),
        ("completion_fd", c_int),
    ]


class nvgpu_gpu_get_event_fd_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("event_fd", c_int),
    ]


class nvgpu_gpu_get_memory_state_args(Structure):
    _fields_ = [
        ("total_free_bytes", c_ulong),
        ("reserved", c_ulong * 4),
    ]


class nvgpu_gpu_get_fbp_l2_masks_args(Structure):
    _fields_ = [
        ("mask_buf_size", c_uint),
        ("reserved", c_uint),
        ("mask_buf_addr", c_ulong),
    ]


class nvgpu_gpu_get_voltage_args(Structure):
    _fields_ = [
        ("reserved", c_ulong),
        ("which", c_uint),
        ("voltage", c_uint),
    ]


class nvgpu_gpu_get_current_args(Structure):
    _fields_ = [
        ("reserved", c_uint * 3),
        ("currnt", c_uint),
    ]


class nvgpu_gpu_get_power_args(Structure):
    _fields_ = [
        ("reserved", c_uint * 3),
        ("power", c_uint),
    ]


class nvgpu_gpu_get_temperature_args(Structure):
    _fields_ = [
        ("reserved", c_uint * 3),
        ("temp_f24_8", c_int),
    ]


class nvgpu_gpu_set_therm_alert_limit_args(Structure):
    _fields_ = [
        ("reserved", c_uint * 3),
        ("temp_f24_8", c_int),
    ]


class nvgpu_gpu_set_deterministic_opts_args(Structure):
    _fields_ = [
        ("num_channels", c_uint),
        ("flags", c_uint),
        ("channels", c_ulong),
    ]


class nvgpu_gpu_event_info(Structure):
    _fields_ = [
        ("event_id", c_uint),
        ("reserved", c_uint),
        ("timestamp", c_ulong),
    ]


class nvgpu_gpu_set_event_filter_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("size", c_uint),
        ("buffer", c_ulong),
    ]


class nvgpu_tsg_bind_channel_ex_args(Structure):
    _fields_ = [
        ("channel_fd", c_int),
        ("subcontext_id", c_uint),
        ("num_active_tpcs", c_uint),
        ("tpc_pg_enabled", c_ubyte),
        ("reserved", c_ubyte * 11),
    ]


class nvgpu_tsg_sm_error_state_record(Structure):
    _fields_ = [
        ("global_esr", c_uint),
        ("warp_esr", c_uint),
        ("warp_esr_pc", c_ulong),
        ("global_esr_report_mask", c_uint),
        ("warp_esr_report_mask", c_uint),
    ]


class nvgpu_tsg_read_single_sm_error_state_args(Structure):
    _fields_ = [
        ("sm_id", c_uint),
        ("reserved", c_uint),
        ("record_mem", c_ulong),
        ("record_size", c_ulong),
    ]


class nvgpu_dbg_gpu_bind_channel_args(Structure):
    _fields_ = [
        ("channel_fd", c_uint),
        ("_pad0", c_uint * 1),
    ]


class nvgpu_dbg_gpu_reg_op(Structure):
    _fields_ = [
        ("op", c_ubyte),
        ("type", c_ubyte),
        ("status", c_ubyte),
        ("quad", c_ubyte),
        ("group_mask", c_uint),
        ("sub_group_mask", c_uint),
        ("offset", c_uint),
        ("value_lo", c_uint),
        ("value_hi", c_uint),
        ("and_n_mask_lo", c_uint),
        ("and_n_mask_hi", c_uint),
    ]


class nvgpu_dbg_gpu_exec_reg_ops_args(Structure):
    _fields_ = [
        ("ops", c_ulong),
        ("num_ops", c_uint),
        ("gr_ctx_resident", c_uint),
    ]


class nvgpu_dbg_gpu_events_ctrl_args(Structure):
    _fields_ = [
        ("cmd", c_uint),
        ("_pad0", c_uint * 1),
    ]


class nvgpu_dbg_gpu_powergate_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("mode", c_uint),
    ]


class nvgpu_dbg_gpu_smpc_ctxsw_mode_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("mode", c_uint),
    ]


class nvgpu_dbg_gpu_suspend_resume_all_sms_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("mode", c_uint),
    ]


class nvgpu_dbg_gpu_perfbuf_map_args(Structure):
    _fields_ = [
        ("dmabuf_fd", c_uint),
        ("reserved", c_uint),
        ("mapping_size", c_ulong),
        ("offset", c_ulong),
    ]


class nvgpu_dbg_gpu_perfbuf_unmap_args(Structure):
    _fields_ = [
        ("offset", c_ulong),
    ]


class nvgpu_dbg_gpu_pc_sampling_args(Structure):
    _fields_ = [
        ("enable", c_uint),
        ("_pad0", c_uint * 1),
    ]


class nvgpu_dbg_gpu_timeout_args(Structure):
    _fields_ = [
        ("enable", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_dbg_gpu_set_next_stop_trigger_type_args(Structure):
    _fields_ = [
        ("broadcast", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_dbg_gpu_hwpm_ctxsw_mode_args(Structure):
    _fields_ = [
        ("mode", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_dbg_gpu_sm_error_state_record(Structure):
    _fields_ = [
        ("hww_global_esr", c_uint),
        ("hww_warp_esr", c_uint),
        ("hww_warp_esr_pc", c_ulong),
        ("hww_global_esr_report_mask", c_uint),
        ("hww_warp_esr_report_mask", c_uint),
    ]


class nvgpu_dbg_gpu_read_single_sm_error_state_args(Structure):
    _fields_ = [
        ("sm_id", c_uint),
        ("padding", c_uint),
        ("sm_error_state_record_mem", c_ulong),
        ("sm_error_state_record_size", c_ulong),
    ]


class nvgpu_dbg_gpu_clear_single_sm_error_state_args(Structure):
    _fields_ = [
        ("sm_id", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_dbg_gpu_unbind_channel_args(Structure):
    _fields_ = [
        ("channel_fd", c_uint),
        ("_pad0", c_uint * 1),
    ]


class nvgpu_dbg_gpu_suspend_resume_contexts_args(Structure):
    _fields_ = [
        ("action", c_uint),
        ("is_resident_context", c_uint),
        ("resident_context_fd", c_int),
        ("padding", c_uint),
    ]


class nvgpu_dbg_gpu_access_fb_memory_args(Structure):
    _fields_ = [
        ("cmd", c_uint),
        ("dmabuf_fd", c_int),
        ("offset", c_ulong),
        ("buffer", c_ulong),
        ("size", c_ulong),
    ]


class nvgpu_dbg_gpu_profiler_obj_mgt_args(Structure):
    _fields_ = [
        ("profiler_handle", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_dbg_gpu_profiler_reserve_args(Structure):
    _fields_ = [
        ("profiler_handle", c_uint),
        ("acquire", c_uint),
    ]


class nvgpu_dbg_gpu_set_sm_exception_type_mask_args(Structure):
    _fields_ = [
        ("exception_type_mask", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_dbg_gpu_cycle_stats_args(Structure):
    _fields_ = [
        ("dmabuf_fd", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_dbg_gpu_cycle_stats_snapshot_args(Structure):
    _fields_ = [
        ("cmd", c_uint),
        ("dmabuf_fd", c_uint),
        ("extra", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_dbg_gpu_set_ctx_mmu_debug_mode_args(Structure):
    _fields_ = [
        ("mode", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_gpfifo(Structure):
    _fields_ = [
        ("entry0", c_uint),
        ("entry1", c_uint),
    ]


class nvgpu_get_param_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("value", c_uint),
    ]


class nvgpu_channel_open_args_unamed_union_0_unamed_struct_1(Structure):
    _fields_ = [
        ("runlist_id", c_int),
    ]


class nvgpu_channel_open_args_unamed_union_0_unamed_struct_2(Structure):
    _fields_ = [
        ("channel_fd", c_int),
    ]


class nvgpu_channel_open_args_unamed_union_0(Union):
    _fields_ = [
        ("channel_fd", c_int),
        ("in", nvgpu_channel_open_args_unamed_union_0_unamed_struct_1),
        ("out", nvgpu_channel_open_args_unamed_union_0_unamed_struct_2),
    ]


class nvgpu_channel_open_args(Structure):
    _fields_ = [
        ("unamed_field0", nvgpu_channel_open_args_unamed_union_0),
    ]


class nvgpu_set_nvmap_fd_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("fd", c_uint),
    ]


class nvgpu_alloc_obj_ctx_args(Structure):
    _fields_ = [
        ("class_num", c_uint),
        ("flags", c_uint),
        ("obj_id", c_ulong),
    ]


class nvgpu_alloc_gpfifo_args(Structure):
    _fields_ = [
        ("num_entries", c_uint),
        ("flags", c_uint),
    ]


class nvgpu_alloc_gpfifo_ex_args(Structure):
    _fields_ = [
        ("num_entries", c_uint),
        ("num_inflight_jobs", c_uint),
        ("flags", c_uint),
        ("reserved", c_uint * 5),
    ]


class nvgpu_channel_setup_bind_args(Structure):
    _fields_ = [
        ("num_gpfifo_entries", c_uint),
        ("num_inflight_jobs", c_uint),
        ("flags", c_uint),
        ("userd_dmabuf_fd", c_int),
        ("gpfifo_dmabuf_fd", c_int),
        ("work_submit_token", c_uint),
        ("userd_dmabuf_offset", c_ulong),
        ("gpfifo_dmabuf_offset", c_ulong),
        ("reserved", c_uint * 9),
    ]


class nvgpu_fence(Structure):
    _fields_ = [
        ("id", c_uint),
        ("value", c_uint),
    ]


class nvgpu_submit_gpfifo_args(Structure):
    _fields_ = [
        ("gpfifo", c_ulong),
        ("num_entries", c_uint),
        ("flags", c_uint),
        ("fence", nvgpu_fence),
    ]


class nvgpu_wait_args_unamed_union_2_unamed_struct_0(Structure):
    _fields_ = [
        ("dmabuf_fd", c_uint),
        ("offset", c_uint),
        ("padding1", c_uint),
        ("padding2", c_uint),
    ]


class nvgpu_wait_args_unamed_union_2_unamed_struct_1(Structure):
    _fields_ = [
        ("dmabuf_fd", c_uint),
        ("offset", c_uint),
        ("payload", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_wait_args_unamed_union_2(Union):
    _fields_ = [
        ("notifier", nvgpu_wait_args_unamed_union_2_unamed_struct_0),
        ("semaphore", nvgpu_wait_args_unamed_union_2_unamed_struct_1),
    ]


class nvgpu_wait_args(Structure):
    _fields_ = [
        ("type", c_uint),
        ("timeout", c_uint),
        ("condition", nvgpu_wait_args_unamed_union_2),
    ]


class nvgpu_set_timeout_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("timeout", c_uint),
    ]


class nvgpu_set_timeout_ex_args(Structure):
    _fields_ = [
        ("timeout", c_uint),
        ("flags", c_uint),
    ]


class nvgpu_zcull_bind_args(Structure):
    _fields_ = [
        ("gpu_va", c_ulong),
        ("mode", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_set_error_notifier(Structure):
    _fields_ = [
        ("offset", c_ulong),
        ("size", c_ulong),
        ("mem", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_notification_unamed_struct_0(Structure):
    _fields_ = [
        ("nanoseconds", c_uint * 2),
    ]


class nvgpu_notification(Structure):
    _fields_ = [
        ("time_stamp", nvgpu_notification_unamed_struct_0),
        ("info32", c_uint),
        ("info16", c_ushort),
        ("status", c_ushort),
    ]


class nvgpu_channel_wdt_args(Structure):
    _fields_ = [
        ("wdt_status", c_uint),
        ("timeout_ms", c_uint),
    ]


class nvgpu_runlist_interleave_args(Structure):
    _fields_ = [
        ("level", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_timeslice_args(Structure):
    _fields_ = [
        ("timeslice_us", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_event_id_ctrl_args(Structure):
    _fields_ = [
        ("cmd", c_uint),
        ("event_id", c_uint),
        ("event_fd", c_int),
        ("padding", c_uint),
    ]


class nvgpu_preemption_mode_args(Structure):
    _fields_ = [
        ("graphics_preempt_mode", c_uint),
        ("compute_preempt_mode", c_uint),
    ]


class nvgpu_boosted_ctx_args(Structure):
    _fields_ = [
        ("boost", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_get_user_syncpoint_args(Structure):
    _fields_ = [
        ("gpu_va", c_ulong),
        ("syncpoint_id", c_uint),
        ("syncpoint_max", c_uint),
    ]


class nvgpu_reschedule_runlist_args(Structure):
    _fields_ = [
        ("flags", c_uint),
    ]


class nvgpu32_as_alloc_space_args_unamed_union_3(Union):
    _fields_ = [
        ("offset", c_ulong),
        ("align", c_ulong),
    ]


class nvgpu32_as_alloc_space_args(Structure):
    _fields_ = [
        ("pages", c_uint),
        ("page_size", c_uint),
        ("flags", c_uint),
        ("o_a", nvgpu32_as_alloc_space_args_unamed_union_3),
    ]


class nvgpu_as_alloc_space_args_unamed_union_4(Union):
    _fields_ = [
        ("offset", c_ulong),
        ("align", c_ulong),
    ]


class nvgpu_as_alloc_space_args(Structure):
    _fields_ = [
        ("pages", c_uint),
        ("page_size", c_uint),
        ("flags", c_uint),
        ("padding", c_uint),
        ("o_a", nvgpu_as_alloc_space_args_unamed_union_4),
    ]


class nvgpu_as_free_space_args(Structure):
    _fields_ = [
        ("offset", c_ulong),
        ("pages", c_uint),
        ("page_size", c_uint),
    ]


class nvgpu_as_bind_channel_args(Structure):
    _pack_ = 1
    _fields_ = [
        ("channel_fd", c_uint),
    ]


class nvgpu_as_map_buffer_ex_args(Structure):
    _fields_ = [
        ("flags", c_uint),
        ("compr_kind", c_short),
        ("incompr_kind", c_short),
        ("dmabuf_fd", c_uint),
        ("page_size", c_uint),
        ("buffer_offset", c_ulong),
        ("mapping_size", c_ulong),
        ("offset", c_ulong),
    ]


class nvgpu_as_get_buffer_compbits_info_args(Structure):
    _fields_ = [
        ("mapping_gva", c_ulong),
        ("compbits_win_size", c_ulong),
        ("compbits_win_ctagline", c_uint),
        ("mapping_ctagline", c_uint),
        ("flags", c_uint),
        ("reserved1", c_uint),
    ]


class nvgpu_as_map_buffer_compbits_args_unamed_union_2(Union):
    _fields_ = [
        ("mapping_iova", c_ulong),
        ("mapping_iova_buf_addr", c_ulong),
    ]


class nvgpu_as_map_buffer_compbits_args(Structure):
    _fields_ = [
        ("mapping_gva", c_ulong),
        ("compbits_win_gva", c_ulong),
        ("unamed_field0", nvgpu_as_map_buffer_compbits_args_unamed_union_2),
        ("mapping_iova_buf_size", c_ulong),
        ("flags", c_uint),
        ("reserved1", c_uint),
    ]


class nvgpu_as_unmap_buffer_args(Structure):
    _fields_ = [
        ("offset", c_ulong),
    ]


class nvgpu_as_va_region(Structure):
    _fields_ = [
        ("offset", c_ulong),
        ("page_size", c_uint),
        ("reserved", c_uint),
        ("pages", c_ulong),
    ]


class nvgpu_as_get_va_regions_args(Structure):
    _fields_ = [
        ("buf_addr", c_ulong),
        ("buf_size", c_uint),
        ("reserved", c_uint),
    ]


class nvgpu_as_map_buffer_batch_args(Structure):
    _fields_ = [
        ("unmaps", c_ulong),
        ("maps", c_ulong),
        ("num_unmaps", c_uint),
        ("num_maps", c_uint),
        ("reserved", c_ulong),
    ]


class nvgpu_as_get_sync_ro_map_args(Structure):
    _fields_ = [
        ("base_gpuva", c_ulong),
        ("sync_size", c_uint),
        ("padding", c_uint),
    ]


class nvgpu_ctxsw_trace_entry(Structure):
    _fields_ = [
        ("tag", c_ubyte),
        ("vmid", c_ubyte),
        ("seqno", c_ushort),
        ("context_id", c_uint),
        ("pid", c_ulong),
        ("timestamp", c_ulong),
    ]


class nvgpu_ctxsw_ring_header(Structure):
    _fields_ = [
        ("magic", c_uint),
        ("version", c_uint),
        ("num_ents", c_uint),
        ("ent_size", c_uint),
        ("drop_count", c_uint),
        ("write_seqno", c_uint),
        ("write_idx", c_uint),
        ("read_idx", c_uint),
    ]


class nvgpu_ctxsw_ring_setup_args(Structure):
    _fields_ = [
        ("size", c_uint),
    ]


class nvgpu_ctxsw_trace_filter(Structure):
    _fields_ = [
        ("tag_bits", c_ulong * 4),
    ]


class nvgpu_ctxsw_trace_filter_args(Structure):
    _fields_ = [
        ("filter", nvgpu_ctxsw_trace_filter),
    ]


class nvgpu_sched_get_tsgs_args(Structure):
    _fields_ = [
        ("size", c_uint),
        ("buffer", c_ulong),
    ]


class nvgpu_sched_get_tsgs_by_pid_args(Structure):
    _fields_ = [
        ("pid", c_ulong),
        ("size", c_uint),
        ("buffer", c_ulong),
    ]


class nvgpu_sched_tsg_get_params_args(Structure):
    _fields_ = [
        ("tsgid", c_uint),
        ("timeslice", c_uint),
        ("runlist_interleave", c_uint),
        ("graphics_preempt_mode", c_uint),
        ("compute_preempt_mode", c_uint),
        ("pid", c_ulong),
    ]


class nvgpu_sched_tsg_timeslice_args(Structure):
    _fields_ = [
        ("tsgid", c_uint),
        ("timeslice", c_uint),
    ]


class nvgpu_sched_tsg_runlist_interleave_args(Structure):
    _fields_ = [
        ("tsgid", c_uint),
        ("runlist_interleave", c_uint),
    ]


class nvgpu_sched_api_version_args(Structure):
    _fields_ = [
        ("version", c_uint),
    ]


class nvgpu_sched_tsg_refcount_args(Structure):
    _fields_ = [
        ("tsgid", c_uint),
    ]


class nvgpu_sched_event_arg(Structure):
    _fields_ = [
        ("reserved", c_ulong),
        ("status", c_ulong),
    ]


NVGPU_GPU_IOCTL_RESUME_FROM_PAUSE = IO(71, 21)
NVGPU_GPU_IOCTL_TRIGGER_SUSPEND = IO(71, 22)
NVGPU_GPU_IOCTL_CLEAR_SM_ERRORS = IO(71, 23)
NVGPU_TSG_IOCTL_BIND_CHANNEL = IOW(84, 1, c_int)
NVGPU_TSG_IOCTL_UNBIND_CHANNEL = IOW(84, 2, c_int)
NVGPU_IOCTL_TSG_ENABLE = IO(84, 3)
NVGPU_IOCTL_TSG_DISABLE = IO(84, 4)
NVGPU_IOCTL_TSG_PREEMPT = IO(84, 5)
NVGPU_IOCTL_CHANNEL_ENABLE = IO(72, 113)
NVGPU_IOCTL_CHANNEL_DISABLE = IO(72, 114)
NVGPU_IOCTL_CHANNEL_PREEMPT = IO(72, 115)
NVGPU_IOCTL_CHANNEL_FORCE_RESET = IO(72, 116)
NVGPU_CTXSW_IOCTL_TRACE_ENABLE = IO(67, 1)
NVGPU_CTXSW_IOCTL_TRACE_DISABLE = IO(67, 2)
NVGPU_CTXSW_IOCTL_POLL = IO(67, 6)
NVGPU_SCHED_IOCTL_LOCK_CONTROL = IO(83, 7)
NVGPU_SCHED_IOCTL_UNLOCK_CONTROL = IO(83, 8)
NVGPU_GPU_IOCTL_ZCULL_GET_CTX_SIZE = IOR(71, 1, nvgpu_gpu_zcull_get_ctx_size_args)
NVGPU_GPU_IOCTL_ZCULL_GET_INFO = IOR(71, 2, nvgpu_gpu_zcull_get_info_args)
NVGPU_GPU_IOCTL_ZBC_SET_TABLE = IOW(71, 3, nvgpu_gpu_zbc_set_table_args)
NVGPU_GPU_IOCTL_ZBC_QUERY_TABLE = IOWR(71, 4, nvgpu_gpu_zbc_query_table_args)
NVGPU_GPU_IOCTL_GET_CHARACTERISTICS = IOWR(71, 5, nvgpu_gpu_get_characteristics)
NVGPU_GPU_IOCTL_PREPARE_COMPRESSIBLE_READ = IOWR(71, 6, nvgpu_gpu_prepare_compressible_read_args)
NVGPU_GPU_IOCTL_MARK_COMPRESSIBLE_WRITE = IOWR(71, 7, nvgpu_gpu_mark_compressible_write_args)
NVGPU_GPU_IOCTL_ALLOC_AS = IOWR(71, 8, nvgpu_alloc_as_args)
NVGPU_GPU_IOCTL_OPEN_TSG = IOWR(71, 9, nvgpu_gpu_open_tsg_args)
NVGPU_GPU_IOCTL_GET_TPC_MASKS = IOWR(71, 10, nvgpu_gpu_get_tpc_masks_args)
NVGPU_GPU_IOCTL_OPEN_CHANNEL = IOWR(71, 11, nvgpu_gpu_open_channel_args)
NVGPU_GPU_IOCTL_FLUSH_L2 = IOWR(71, 12, nvgpu_gpu_l2_fb_args)
NVGPU_GPU_IOCTL_SET_MMUDEBUG_MODE = IOWR(71, 14, nvgpu_gpu_mmu_debug_mode_args)
NVGPU_GPU_IOCTL_SET_SM_DEBUG_MODE = IOWR(71, 15, nvgpu_gpu_sm_debug_mode_args)
NVGPU_GPU_IOCTL_WAIT_FOR_PAUSE = IOWR(71, 16, nvgpu_gpu_wait_pause_args)
NVGPU_GPU_IOCTL_GET_TPC_EXCEPTION_EN_STATUS = IOWR(71, 17, nvgpu_gpu_tpc_exception_en_status_args)
NVGPU_GPU_IOCTL_NUM_VSMS = IOWR(71, 18, nvgpu_gpu_num_vsms)
NVGPU_GPU_IOCTL_VSMS_MAPPING = IOWR(71, 19, nvgpu_gpu_vsms_mapping)
NVGPU_GPU_IOCTL_GET_CPU_TIME_CORRELATION_INFO = IOWR(71, 24, nvgpu_gpu_get_cpu_time_correlation_info_args)
NVGPU_GPU_IOCTL_GET_GPU_TIME = IOWR(71, 25, nvgpu_gpu_get_gpu_time_args)
NVGPU_GPU_IOCTL_GET_ENGINE_INFO = IOWR(71, 26, nvgpu_gpu_get_engine_info_args)
NVGPU_GPU_IOCTL_ALLOC_VIDMEM = IOWR(71, 27, nvgpu_gpu_alloc_vidmem_args)
NVGPU_GPU_IOCTL_CLK_GET_RANGE = IOWR(71, 28, nvgpu_gpu_clk_range_args)
NVGPU_GPU_IOCTL_CLK_GET_VF_POINTS = IOWR(71, 29, nvgpu_gpu_clk_vf_points_args)
NVGPU_GPU_IOCTL_CLK_GET_INFO = IOWR(71, 30, nvgpu_gpu_clk_get_info_args)
NVGPU_GPU_IOCTL_CLK_SET_INFO = IOWR(71, 31, nvgpu_gpu_clk_set_info_args)
NVGPU_GPU_IOCTL_GET_EVENT_FD = IOWR(71, 32, nvgpu_gpu_get_event_fd_args)
NVGPU_GPU_IOCTL_GET_MEMORY_STATE = IOWR(71, 33, nvgpu_gpu_get_memory_state_args)
NVGPU_GPU_IOCTL_GET_VOLTAGE = IOWR(71, 34, nvgpu_gpu_get_voltage_args)
NVGPU_GPU_IOCTL_GET_CURRENT = IOWR(71, 35, nvgpu_gpu_get_current_args)
NVGPU_GPU_IOCTL_GET_POWER = IOWR(71, 36, nvgpu_gpu_get_power_args)
NVGPU_GPU_IOCTL_GET_TEMPERATURE = IOWR(71, 37, nvgpu_gpu_get_temperature_args)
NVGPU_GPU_IOCTL_GET_FBP_L2_MASKS = IOWR(71, 38, nvgpu_gpu_get_fbp_l2_masks_args)
NVGPU_GPU_IOCTL_SET_THERM_ALERT_LIMIT = IOWR(71, 39, nvgpu_gpu_set_therm_alert_limit_args)
NVGPU_GPU_IOCTL_SET_DETERMINISTIC_OPTS = IOWR(71, 40, nvgpu_gpu_set_deterministic_opts_args)
NVGPU_EVENT_IOCTL_SET_FILTER = IOW(69, 1, nvgpu_gpu_set_event_filter_args)
NVGPU_IOCTL_TSG_EVENT_ID_CTRL = IOWR(84, 7, nvgpu_event_id_ctrl_args)
NVGPU_IOCTL_TSG_SET_RUNLIST_INTERLEAVE = IOW(84, 8, nvgpu_runlist_interleave_args)
NVGPU_IOCTL_TSG_SET_TIMESLICE = IOW(84, 9, nvgpu_timeslice_args)
NVGPU_IOCTL_TSG_GET_TIMESLICE = IOR(84, 10, nvgpu_timeslice_args)
NVGPU_TSG_IOCTL_BIND_CHANNEL_EX = IOWR(84, 11, nvgpu_tsg_bind_channel_ex_args)
NVGPU_TSG_IOCTL_READ_SINGLE_SM_ERROR_STATE = IOWR(84, 12, nvgpu_tsg_read_single_sm_error_state_args)
NVGPU_DBG_GPU_IOCTL_BIND_CHANNEL = IOWR(68, 1, nvgpu_dbg_gpu_bind_channel_args)
NVGPU_DBG_GPU_IOCTL_REG_OPS = IOWR(68, 2, nvgpu_dbg_gpu_exec_reg_ops_args)
NVGPU_DBG_GPU_IOCTL_EVENTS_CTRL = IOWR(68, 3, nvgpu_dbg_gpu_events_ctrl_args)
NVGPU_DBG_GPU_IOCTL_POWERGATE = IOWR(68, 4, nvgpu_dbg_gpu_powergate_args)
NVGPU_DBG_GPU_IOCTL_SMPC_CTXSW_MODE = IOWR(68, 5, nvgpu_dbg_gpu_smpc_ctxsw_mode_args)
NVGPU_DBG_GPU_IOCTL_SUSPEND_RESUME_ALL_SMS = IOWR(68, 6, nvgpu_dbg_gpu_suspend_resume_all_sms_args)
NVGPU_DBG_GPU_IOCTL_PERFBUF_MAP = IOWR(68, 7, nvgpu_dbg_gpu_perfbuf_map_args)
NVGPU_DBG_GPU_IOCTL_PERFBUF_UNMAP = IOWR(68, 8, nvgpu_dbg_gpu_perfbuf_unmap_args)
NVGPU_DBG_GPU_IOCTL_PC_SAMPLING = IOW(68, 9, nvgpu_dbg_gpu_pc_sampling_args)
NVGPU_DBG_GPU_IOCTL_TIMEOUT = IOW(68, 10, nvgpu_dbg_gpu_timeout_args)
NVGPU_DBG_GPU_IOCTL_GET_TIMEOUT = IOR(68, 11, nvgpu_dbg_gpu_timeout_args)
NVGPU_DBG_GPU_IOCTL_SET_NEXT_STOP_TRIGGER_TYPE = IOWR(68, 12, nvgpu_dbg_gpu_set_next_stop_trigger_type_args)
NVGPU_DBG_GPU_IOCTL_HWPM_CTXSW_MODE = IOWR(68, 13, nvgpu_dbg_gpu_hwpm_ctxsw_mode_args)
NVGPU_DBG_GPU_IOCTL_READ_SINGLE_SM_ERROR_STATE = IOWR(68, 14, nvgpu_dbg_gpu_read_single_sm_error_state_args)
NVGPU_DBG_GPU_IOCTL_CLEAR_SINGLE_SM_ERROR_STATE = IOW(68, 15, nvgpu_dbg_gpu_clear_single_sm_error_state_args)
NVGPU_DBG_GPU_IOCTL_UNBIND_CHANNEL = IOW(68, 17, nvgpu_dbg_gpu_unbind_channel_args)
NVGPU_DBG_GPU_IOCTL_SUSPEND_RESUME_CONTEXTS = IOWR(68, 18, nvgpu_dbg_gpu_suspend_resume_contexts_args)
NVGPU_DBG_GPU_IOCTL_ACCESS_FB_MEMORY = IOWR(68, 19, nvgpu_dbg_gpu_access_fb_memory_args)
NVGPU_DBG_GPU_IOCTL_PROFILER_ALLOCATE = IOWR(68, 20, nvgpu_dbg_gpu_profiler_obj_mgt_args)
NVGPU_DBG_GPU_IOCTL_PROFILER_FREE = IOWR(68, 21, nvgpu_dbg_gpu_profiler_obj_mgt_args)
NVGPU_DBG_GPU_IOCTL_PROFILER_RESERVE = IOWR(68, 22, nvgpu_dbg_gpu_profiler_reserve_args)
NVGPU_DBG_GPU_IOCTL_SET_SM_EXCEPTION_TYPE_MASK = IOW(68, 23, nvgpu_dbg_gpu_set_sm_exception_type_mask_args)
NVGPU_DBG_GPU_IOCTL_CYCLE_STATS = IOWR(68, 24, nvgpu_dbg_gpu_cycle_stats_args)
NVGPU_DBG_GPU_IOCTL_CYCLE_STATS_SNAPSHOT = IOWR(68, 25, nvgpu_dbg_gpu_cycle_stats_snapshot_args)
NVGPU_DBG_GPU_IOCTL_SET_CTX_MMU_DEBUG_MODE = IOW(68, 26, nvgpu_dbg_gpu_set_ctx_mmu_debug_mode_args)
NVGPU_IOCTL_CHANNEL_SET_NVMAP_FD = IOW(72, 5, nvgpu_set_nvmap_fd_args)
NVGPU_IOCTL_CHANNEL_SET_TIMEOUT = IOW(72, 11, nvgpu_set_timeout_args)
NVGPU_IOCTL_CHANNEL_GET_TIMEDOUT = IOR(72, 12, nvgpu_get_param_args)
NVGPU_IOCTL_CHANNEL_SET_TIMEOUT_EX = IOWR(72, 18, nvgpu_set_timeout_ex_args)
NVGPU_IOCTL_CHANNEL_ALLOC_GPFIFO = IOW(72, 100, nvgpu_alloc_gpfifo_args)
NVGPU_IOCTL_CHANNEL_WAIT = IOWR(72, 102, nvgpu_wait_args)
NVGPU_IOCTL_CHANNEL_SUBMIT_GPFIFO = IOWR(72, 107, nvgpu_submit_gpfifo_args)
NVGPU_IOCTL_CHANNEL_ALLOC_OBJ_CTX = IOWR(72, 108, nvgpu_alloc_obj_ctx_args)
NVGPU_IOCTL_CHANNEL_ZCULL_BIND = IOWR(72, 110, nvgpu_zcull_bind_args)
NVGPU_IOCTL_CHANNEL_SET_ERROR_NOTIFIER = IOWR(72, 111, nvgpu_set_error_notifier)
NVGPU_IOCTL_CHANNEL_OPEN = IOR(72, 112, nvgpu_channel_open_args)
NVGPU_IOCTL_CHANNEL_EVENT_ID_CTRL = IOWR(72, 117, nvgpu_event_id_ctrl_args)
NVGPU_IOCTL_CHANNEL_WDT = IOW(72, 119, nvgpu_channel_wdt_args)
NVGPU_IOCTL_CHANNEL_SET_RUNLIST_INTERLEAVE = IOW(72, 120, nvgpu_runlist_interleave_args)
NVGPU_IOCTL_CHANNEL_SET_TIMESLICE = IOW(72, 121, nvgpu_timeslice_args)
NVGPU_IOCTL_CHANNEL_SET_PREEMPTION_MODE = IOW(72, 122, nvgpu_preemption_mode_args)
NVGPU_IOCTL_CHANNEL_ALLOC_GPFIFO_EX = IOW(72, 123, nvgpu_alloc_gpfifo_ex_args)
NVGPU_IOCTL_CHANNEL_SET_BOOSTED_CTX = IOW(72, 124, nvgpu_boosted_ctx_args)
NVGPU_IOCTL_CHANNEL_GET_TIMESLICE = IOW(72, 125, nvgpu_timeslice_args)
NVGPU_IOCTL_CHANNEL_GET_USER_SYNCPOINT = IOR(72, 126, nvgpu_get_user_syncpoint_args)
NVGPU_IOCTL_CHANNEL_RESCHEDULE_RUNLIST = IOW(72, 127, nvgpu_reschedule_runlist_args)
NVGPU_IOCTL_CHANNEL_SETUP_BIND = IOWR(72, 128, nvgpu_channel_setup_bind_args)
NVGPU_AS_IOCTL_BIND_CHANNEL = IOWR(65, 1, nvgpu_as_bind_channel_args)
NVGPU32_AS_IOCTL_ALLOC_SPACE = IOWR(65, 2, nvgpu32_as_alloc_space_args)
NVGPU_AS_IOCTL_FREE_SPACE = IOWR(65, 3, nvgpu_as_free_space_args)
NVGPU_AS_IOCTL_UNMAP_BUFFER = IOWR(65, 5, nvgpu_as_unmap_buffer_args)
NVGPU_AS_IOCTL_ALLOC_SPACE = IOWR(65, 6, nvgpu_as_alloc_space_args)
NVGPU_AS_IOCTL_MAP_BUFFER_EX = IOWR(65, 7, nvgpu_as_map_buffer_ex_args)
NVGPU_AS_IOCTL_GET_VA_REGIONS = IOWR(65, 8, nvgpu_as_get_va_regions_args)
NVGPU_AS_IOCTL_GET_BUFFER_COMPBITS_INFO = IOWR(65, 9, nvgpu_as_get_buffer_compbits_info_args)
NVGPU_AS_IOCTL_MAP_BUFFER_COMPBITS = IOWR(65, 10, nvgpu_as_map_buffer_compbits_args)
NVGPU_AS_IOCTL_MAP_BUFFER_BATCH = IOWR(65, 11, nvgpu_as_map_buffer_batch_args)
NVGPU_AS_IOCTL_GET_SYNC_RO_MAP = IOR(65, 12, nvgpu_as_get_sync_ro_map_args)
NVGPU_CTXSW_IOCTL_RING_SETUP = IOWR(67, 3, nvgpu_ctxsw_ring_setup_args)
NVGPU_CTXSW_IOCTL_SET_FILTER = IOW(67, 4, nvgpu_ctxsw_trace_filter_args)
NVGPU_CTXSW_IOCTL_GET_FILTER = IOR(67, 5, nvgpu_ctxsw_trace_filter_args)
NVGPU_SCHED_IOCTL_GET_TSGS = IOWR(83, 1, nvgpu_sched_get_tsgs_args)
NVGPU_SCHED_IOCTL_GET_RECENT_TSGS = IOWR(83, 2, nvgpu_sched_get_tsgs_args)
NVGPU_SCHED_IOCTL_GET_TSGS_BY_PID = IOWR(83, 3, nvgpu_sched_get_tsgs_by_pid_args)
NVGPU_SCHED_IOCTL_TSG_GET_PARAMS = IOWR(83, 4, nvgpu_sched_tsg_get_params_args)
NVGPU_SCHED_IOCTL_TSG_SET_TIMESLICE = IOW(83, 5, nvgpu_sched_tsg_timeslice_args)
NVGPU_SCHED_IOCTL_TSG_SET_RUNLIST_INTERLEAVE = IOW(83, 6, nvgpu_sched_tsg_runlist_interleave_args)
NVGPU_SCHED_IOCTL_GET_API_VERSION = IOR(83, 9, nvgpu_sched_api_version_args)
NVGPU_SCHED_IOCTL_GET_TSG = IOW(83, 10, nvgpu_sched_tsg_refcount_args)
NVGPU_SCHED_IOCTL_PUT_TSG = IOW(83, 11, nvgpu_sched_tsg_refcount_args)


def nvgpu_gpu_ioctl_resume_from_pause(fd: Any) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_RESUME_FROM_PAUSE)


def nvgpu_gpu_ioctl_trigger_suspend(fd: Any) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_TRIGGER_SUSPEND)


def nvgpu_gpu_ioctl_clear_sm_errors(fd: Any) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_CLEAR_SM_ERRORS)


def nvgpu_tsg_ioctl_bind_channel(fd: Any, arg: c_int) -> int:
    return ioctl(fd, NVGPU_TSG_IOCTL_BIND_CHANNEL, pointer(arg))


def nvgpu_tsg_ioctl_unbind_channel(fd: Any, arg: c_int) -> int:
    return ioctl(fd, NVGPU_TSG_IOCTL_UNBIND_CHANNEL, pointer(arg))


def nvgpu_ioctl_tsg_enable(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_ENABLE)


def nvgpu_ioctl_tsg_disable(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_DISABLE)


def nvgpu_ioctl_tsg_preempt(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_PREEMPT)


def nvgpu_ioctl_channel_enable(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_ENABLE)


def nvgpu_ioctl_channel_disable(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_DISABLE)


def nvgpu_ioctl_channel_preempt(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_PREEMPT)


def nvgpu_ioctl_channel_force_reset(fd: Any) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_FORCE_RESET)


def nvgpu_ctxsw_ioctl_trace_enable(fd: Any) -> int:
    return ioctl(fd, NVGPU_CTXSW_IOCTL_TRACE_ENABLE)


def nvgpu_ctxsw_ioctl_trace_disable(fd: Any) -> int:
    return ioctl(fd, NVGPU_CTXSW_IOCTL_TRACE_DISABLE)


def nvgpu_ctxsw_ioctl_poll(fd: Any) -> int:
    return ioctl(fd, NVGPU_CTXSW_IOCTL_POLL)


def nvgpu_sched_ioctl_lock_control(fd: Any) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_LOCK_CONTROL)


def nvgpu_sched_ioctl_unlock_control(fd: Any) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_UNLOCK_CONTROL)


def nvgpu_gpu_ioctl_zcull_get_ctx_size(fd: Any, arg: nvgpu_gpu_zcull_get_ctx_size_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_ZCULL_GET_CTX_SIZE, pointer(arg))


def nvgpu_gpu_ioctl_zcull_get_info(fd: Any, arg: nvgpu_gpu_zcull_get_info_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_ZCULL_GET_INFO, pointer(arg))


def nvgpu_gpu_ioctl_zbc_set_table(fd: Any, arg: nvgpu_gpu_zbc_set_table_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_ZBC_SET_TABLE, pointer(arg))


def nvgpu_gpu_ioctl_zbc_query_table(fd: Any, arg: nvgpu_gpu_zbc_query_table_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_ZBC_QUERY_TABLE, pointer(arg))


def nvgpu_gpu_ioctl_get_characteristics(fd: Any, arg: nvgpu_gpu_get_characteristics) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_CHARACTERISTICS, pointer(arg))


def nvgpu_gpu_ioctl_prepare_compressible_read(fd: Any, arg: nvgpu_gpu_prepare_compressible_read_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_PREPARE_COMPRESSIBLE_READ, pointer(arg))


def nvgpu_gpu_ioctl_mark_compressible_write(fd: Any, arg: nvgpu_gpu_mark_compressible_write_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_MARK_COMPRESSIBLE_WRITE, pointer(arg))


def nvgpu_gpu_ioctl_alloc_as(fd: Any, arg: nvgpu_alloc_as_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_ALLOC_AS, pointer(arg))


def nvgpu_gpu_ioctl_open_tsg(fd: Any, arg: nvgpu_gpu_open_tsg_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_OPEN_TSG, pointer(arg))


def nvgpu_gpu_ioctl_get_tpc_masks(fd: Any, arg: nvgpu_gpu_get_tpc_masks_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_TPC_MASKS, pointer(arg))


def nvgpu_gpu_ioctl_open_channel(fd: Any, arg: nvgpu_gpu_open_channel_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_OPEN_CHANNEL, pointer(arg))


def nvgpu_gpu_ioctl_flush_l2(fd: Any, arg: nvgpu_gpu_l2_fb_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_FLUSH_L2, pointer(arg))


def nvgpu_gpu_ioctl_set_mmudebug_mode(fd: Any, arg: nvgpu_gpu_mmu_debug_mode_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_SET_MMUDEBUG_MODE, pointer(arg))


def nvgpu_gpu_ioctl_set_sm_debug_mode(fd: Any, arg: nvgpu_gpu_sm_debug_mode_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_SET_SM_DEBUG_MODE, pointer(arg))


def nvgpu_gpu_ioctl_wait_for_pause(fd: Any, arg: nvgpu_gpu_wait_pause_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_WAIT_FOR_PAUSE, pointer(arg))


def nvgpu_gpu_ioctl_get_tpc_exception_en_status(fd: Any, arg: nvgpu_gpu_tpc_exception_en_status_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_TPC_EXCEPTION_EN_STATUS, pointer(arg))


def nvgpu_gpu_ioctl_num_vsms(fd: Any, arg: nvgpu_gpu_num_vsms) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_NUM_VSMS, pointer(arg))


def nvgpu_gpu_ioctl_vsms_mapping(fd: Any, arg: nvgpu_gpu_vsms_mapping) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_VSMS_MAPPING, pointer(arg))


def nvgpu_gpu_ioctl_get_cpu_time_correlation_info(fd: Any, arg: nvgpu_gpu_get_cpu_time_correlation_info_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_CPU_TIME_CORRELATION_INFO, pointer(arg))


def nvgpu_gpu_ioctl_get_gpu_time(fd: Any, arg: nvgpu_gpu_get_gpu_time_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_GPU_TIME, pointer(arg))


def nvgpu_gpu_ioctl_get_engine_info(fd: Any, arg: nvgpu_gpu_get_engine_info_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_ENGINE_INFO, pointer(arg))


def nvgpu_gpu_ioctl_alloc_vidmem(fd: Any, arg: nvgpu_gpu_alloc_vidmem_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_ALLOC_VIDMEM, pointer(arg))


def nvgpu_gpu_ioctl_clk_get_range(fd: Any, arg: nvgpu_gpu_clk_range_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_CLK_GET_RANGE, pointer(arg))


def nvgpu_gpu_ioctl_clk_get_vf_points(fd: Any, arg: nvgpu_gpu_clk_vf_points_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_CLK_GET_VF_POINTS, pointer(arg))


def nvgpu_gpu_ioctl_clk_get_info(fd: Any, arg: nvgpu_gpu_clk_get_info_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_CLK_GET_INFO, pointer(arg))


def nvgpu_gpu_ioctl_clk_set_info(fd: Any, arg: nvgpu_gpu_clk_set_info_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_CLK_SET_INFO, pointer(arg))


def nvgpu_gpu_ioctl_get_event_fd(fd: Any, arg: nvgpu_gpu_get_event_fd_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_EVENT_FD, pointer(arg))


def nvgpu_gpu_ioctl_get_memory_state(fd: Any, arg: nvgpu_gpu_get_memory_state_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_MEMORY_STATE, pointer(arg))


def nvgpu_gpu_ioctl_get_voltage(fd: Any, arg: nvgpu_gpu_get_voltage_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_VOLTAGE, pointer(arg))


def nvgpu_gpu_ioctl_get_current(fd: Any, arg: nvgpu_gpu_get_current_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_CURRENT, pointer(arg))


def nvgpu_gpu_ioctl_get_power(fd: Any, arg: nvgpu_gpu_get_power_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_POWER, pointer(arg))


def nvgpu_gpu_ioctl_get_temperature(fd: Any, arg: nvgpu_gpu_get_temperature_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_TEMPERATURE, pointer(arg))


def nvgpu_gpu_ioctl_get_fbp_l2_masks(fd: Any, arg: nvgpu_gpu_get_fbp_l2_masks_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_GET_FBP_L2_MASKS, pointer(arg))


def nvgpu_gpu_ioctl_set_therm_alert_limit(fd: Any, arg: nvgpu_gpu_set_therm_alert_limit_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_SET_THERM_ALERT_LIMIT, pointer(arg))


def nvgpu_gpu_ioctl_set_deterministic_opts(fd: Any, arg: nvgpu_gpu_set_deterministic_opts_args) -> int:
    return ioctl(fd, NVGPU_GPU_IOCTL_SET_DETERMINISTIC_OPTS, pointer(arg))


def nvgpu_event_ioctl_set_filter(fd: Any, arg: nvgpu_gpu_set_event_filter_args) -> int:
    return ioctl(fd, NVGPU_EVENT_IOCTL_SET_FILTER, pointer(arg))


def nvgpu_ioctl_tsg_event_id_ctrl(fd: Any, arg: nvgpu_event_id_ctrl_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_EVENT_ID_CTRL, pointer(arg))


def nvgpu_ioctl_tsg_set_runlist_interleave(fd: Any, arg: nvgpu_runlist_interleave_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_SET_RUNLIST_INTERLEAVE, pointer(arg))


def nvgpu_ioctl_tsg_set_timeslice(fd: Any, arg: nvgpu_timeslice_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_SET_TIMESLICE, pointer(arg))


def nvgpu_ioctl_tsg_get_timeslice(fd: Any, arg: nvgpu_timeslice_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_TSG_GET_TIMESLICE, pointer(arg))


def nvgpu_tsg_ioctl_bind_channel_ex(fd: Any, arg: nvgpu_tsg_bind_channel_ex_args) -> int:
    return ioctl(fd, NVGPU_TSG_IOCTL_BIND_CHANNEL_EX, pointer(arg))


def nvgpu_tsg_ioctl_read_single_sm_error_state(fd: Any, arg: nvgpu_tsg_read_single_sm_error_state_args) -> int:
    return ioctl(fd, NVGPU_TSG_IOCTL_READ_SINGLE_SM_ERROR_STATE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_bind_channel(fd: Any, arg: nvgpu_dbg_gpu_bind_channel_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_BIND_CHANNEL, pointer(arg))


def nvgpu_dbg_gpu_ioctl_reg_ops(fd: Any, arg: nvgpu_dbg_gpu_exec_reg_ops_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_REG_OPS, pointer(arg))


def nvgpu_dbg_gpu_ioctl_events_ctrl(fd: Any, arg: nvgpu_dbg_gpu_events_ctrl_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_EVENTS_CTRL, pointer(arg))


def nvgpu_dbg_gpu_ioctl_powergate(fd: Any, arg: nvgpu_dbg_gpu_powergate_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_POWERGATE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_smpc_ctxsw_mode(fd: Any, arg: nvgpu_dbg_gpu_smpc_ctxsw_mode_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_SMPC_CTXSW_MODE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_suspend_resume_all_sms(fd: Any, arg: nvgpu_dbg_gpu_suspend_resume_all_sms_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_SUSPEND_RESUME_ALL_SMS, pointer(arg))


def nvgpu_dbg_gpu_ioctl_perfbuf_map(fd: Any, arg: nvgpu_dbg_gpu_perfbuf_map_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_PERFBUF_MAP, pointer(arg))


def nvgpu_dbg_gpu_ioctl_perfbuf_unmap(fd: Any, arg: nvgpu_dbg_gpu_perfbuf_unmap_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_PERFBUF_UNMAP, pointer(arg))


def nvgpu_dbg_gpu_ioctl_pc_sampling(fd: Any, arg: nvgpu_dbg_gpu_pc_sampling_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_PC_SAMPLING, pointer(arg))


def nvgpu_dbg_gpu_ioctl_timeout(fd: Any, arg: nvgpu_dbg_gpu_timeout_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_TIMEOUT, pointer(arg))


def nvgpu_dbg_gpu_ioctl_get_timeout(fd: Any, arg: nvgpu_dbg_gpu_timeout_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_GET_TIMEOUT, pointer(arg))


def nvgpu_dbg_gpu_ioctl_set_next_stop_trigger_type(fd: Any, arg: nvgpu_dbg_gpu_set_next_stop_trigger_type_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_SET_NEXT_STOP_TRIGGER_TYPE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_hwpm_ctxsw_mode(fd: Any, arg: nvgpu_dbg_gpu_hwpm_ctxsw_mode_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_HWPM_CTXSW_MODE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_read_single_sm_error_state(fd: Any, arg: nvgpu_dbg_gpu_read_single_sm_error_state_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_READ_SINGLE_SM_ERROR_STATE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_clear_single_sm_error_state(fd: Any, arg: nvgpu_dbg_gpu_clear_single_sm_error_state_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_CLEAR_SINGLE_SM_ERROR_STATE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_unbind_channel(fd: Any, arg: nvgpu_dbg_gpu_unbind_channel_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_UNBIND_CHANNEL, pointer(arg))


def nvgpu_dbg_gpu_ioctl_suspend_resume_contexts(fd: Any, arg: nvgpu_dbg_gpu_suspend_resume_contexts_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_SUSPEND_RESUME_CONTEXTS, pointer(arg))


def nvgpu_dbg_gpu_ioctl_access_fb_memory(fd: Any, arg: nvgpu_dbg_gpu_access_fb_memory_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_ACCESS_FB_MEMORY, pointer(arg))


def nvgpu_dbg_gpu_ioctl_profiler_allocate(fd: Any, arg: nvgpu_dbg_gpu_profiler_obj_mgt_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_PROFILER_ALLOCATE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_profiler_free(fd: Any, arg: nvgpu_dbg_gpu_profiler_obj_mgt_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_PROFILER_FREE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_profiler_reserve(fd: Any, arg: nvgpu_dbg_gpu_profiler_reserve_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_PROFILER_RESERVE, pointer(arg))


def nvgpu_dbg_gpu_ioctl_set_sm_exception_type_mask(fd: Any, arg: nvgpu_dbg_gpu_set_sm_exception_type_mask_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_SET_SM_EXCEPTION_TYPE_MASK, pointer(arg))


def nvgpu_dbg_gpu_ioctl_cycle_stats(fd: Any, arg: nvgpu_dbg_gpu_cycle_stats_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_CYCLE_STATS, pointer(arg))


def nvgpu_dbg_gpu_ioctl_cycle_stats_snapshot(fd: Any, arg: nvgpu_dbg_gpu_cycle_stats_snapshot_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_CYCLE_STATS_SNAPSHOT, pointer(arg))


def nvgpu_dbg_gpu_ioctl_set_ctx_mmu_debug_mode(fd: Any, arg: nvgpu_dbg_gpu_set_ctx_mmu_debug_mode_args) -> int:
    return ioctl(fd, NVGPU_DBG_GPU_IOCTL_SET_CTX_MMU_DEBUG_MODE, pointer(arg))


def nvgpu_ioctl_channel_set_nvmap_fd(fd: Any, arg: nvgpu_set_nvmap_fd_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_NVMAP_FD, pointer(arg))


def nvgpu_ioctl_channel_set_timeout(fd: Any, arg: nvgpu_set_timeout_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_TIMEOUT, pointer(arg))


def nvgpu_ioctl_channel_get_timedout(fd: Any, arg: nvgpu_get_param_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_GET_TIMEDOUT, pointer(arg))


def nvgpu_ioctl_channel_set_timeout_ex(fd: Any, arg: nvgpu_set_timeout_ex_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_TIMEOUT_EX, pointer(arg))


def nvgpu_ioctl_channel_alloc_gpfifo(fd: Any, arg: nvgpu_alloc_gpfifo_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_ALLOC_GPFIFO, pointer(arg))


def nvgpu_ioctl_channel_wait(fd: Any, arg: nvgpu_wait_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_WAIT, pointer(arg))


def nvgpu_ioctl_channel_submit_gpfifo(fd: Any, arg: nvgpu_submit_gpfifo_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SUBMIT_GPFIFO, pointer(arg))


def nvgpu_ioctl_channel_alloc_obj_ctx(fd: Any, arg: nvgpu_alloc_obj_ctx_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_ALLOC_OBJ_CTX, pointer(arg))


def nvgpu_ioctl_channel_zcull_bind(fd: Any, arg: nvgpu_zcull_bind_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_ZCULL_BIND, pointer(arg))


def nvgpu_ioctl_channel_set_error_notifier(fd: Any, arg: nvgpu_set_error_notifier) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_ERROR_NOTIFIER, pointer(arg))


def nvgpu_ioctl_channel_open(fd: Any, arg: nvgpu_channel_open_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_OPEN, pointer(arg))


def nvgpu_ioctl_channel_event_id_ctrl(fd: Any, arg: nvgpu_event_id_ctrl_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_EVENT_ID_CTRL, pointer(arg))


def nvgpu_ioctl_channel_wdt(fd: Any, arg: nvgpu_channel_wdt_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_WDT, pointer(arg))


def nvgpu_ioctl_channel_set_runlist_interleave(fd: Any, arg: nvgpu_runlist_interleave_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_RUNLIST_INTERLEAVE, pointer(arg))


def nvgpu_ioctl_channel_set_timeslice(fd: Any, arg: nvgpu_timeslice_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_TIMESLICE, pointer(arg))


def nvgpu_ioctl_channel_set_preemption_mode(fd: Any, arg: nvgpu_preemption_mode_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_PREEMPTION_MODE, pointer(arg))


def nvgpu_ioctl_channel_alloc_gpfifo_ex(fd: Any, arg: nvgpu_alloc_gpfifo_ex_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_ALLOC_GPFIFO_EX, pointer(arg))


def nvgpu_ioctl_channel_set_boosted_ctx(fd: Any, arg: nvgpu_boosted_ctx_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SET_BOOSTED_CTX, pointer(arg))


def nvgpu_ioctl_channel_get_timeslice(fd: Any, arg: nvgpu_timeslice_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_GET_TIMESLICE, pointer(arg))


def nvgpu_ioctl_channel_get_user_syncpoint(fd: Any, arg: nvgpu_get_user_syncpoint_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_GET_USER_SYNCPOINT, pointer(arg))


def nvgpu_ioctl_channel_reschedule_runlist(fd: Any, arg: nvgpu_reschedule_runlist_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_RESCHEDULE_RUNLIST, pointer(arg))


def nvgpu_ioctl_channel_setup_bind(fd: Any, arg: nvgpu_channel_setup_bind_args) -> int:
    return ioctl(fd, NVGPU_IOCTL_CHANNEL_SETUP_BIND, pointer(arg))


def nvgpu_as_ioctl_bind_channel(fd: Any, arg: nvgpu_as_bind_channel_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_BIND_CHANNEL, pointer(arg))


def nvgpu32_as_ioctl_alloc_space(fd: Any, arg: nvgpu32_as_alloc_space_args) -> int:
    return ioctl(fd, NVGPU32_AS_IOCTL_ALLOC_SPACE, pointer(arg))


def nvgpu_as_ioctl_free_space(fd: Any, arg: nvgpu_as_free_space_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_FREE_SPACE, pointer(arg))


def nvgpu_as_ioctl_unmap_buffer(fd: Any, arg: nvgpu_as_unmap_buffer_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_UNMAP_BUFFER, pointer(arg))


def nvgpu_as_ioctl_alloc_space(fd: Any, arg: nvgpu_as_alloc_space_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_ALLOC_SPACE, pointer(arg))


def nvgpu_as_ioctl_map_buffer_ex(fd: Any, arg: nvgpu_as_map_buffer_ex_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_MAP_BUFFER_EX, pointer(arg))


def nvgpu_as_ioctl_get_va_regions(fd: Any, arg: nvgpu_as_get_va_regions_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_GET_VA_REGIONS, pointer(arg))


def nvgpu_as_ioctl_get_buffer_compbits_info(fd: Any, arg: nvgpu_as_get_buffer_compbits_info_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_GET_BUFFER_COMPBITS_INFO, pointer(arg))


def nvgpu_as_ioctl_map_buffer_compbits(fd: Any, arg: nvgpu_as_map_buffer_compbits_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_MAP_BUFFER_COMPBITS, pointer(arg))


def nvgpu_as_ioctl_map_buffer_batch(fd: Any, arg: nvgpu_as_map_buffer_batch_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_MAP_BUFFER_BATCH, pointer(arg))


def nvgpu_as_ioctl_get_sync_ro_map(fd: Any, arg: nvgpu_as_get_sync_ro_map_args) -> int:
    return ioctl(fd, NVGPU_AS_IOCTL_GET_SYNC_RO_MAP, pointer(arg))


def nvgpu_ctxsw_ioctl_ring_setup(fd: Any, arg: nvgpu_ctxsw_ring_setup_args) -> int:
    return ioctl(fd, NVGPU_CTXSW_IOCTL_RING_SETUP, pointer(arg))


def nvgpu_ctxsw_ioctl_set_filter(fd: Any, arg: nvgpu_ctxsw_trace_filter_args) -> int:
    return ioctl(fd, NVGPU_CTXSW_IOCTL_SET_FILTER, pointer(arg))


def nvgpu_ctxsw_ioctl_get_filter(fd: Any, arg: nvgpu_ctxsw_trace_filter_args) -> int:
    return ioctl(fd, NVGPU_CTXSW_IOCTL_GET_FILTER, pointer(arg))


def nvgpu_sched_ioctl_get_tsgs(fd: Any, arg: nvgpu_sched_get_tsgs_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_GET_TSGS, pointer(arg))


def nvgpu_sched_ioctl_get_recent_tsgs(fd: Any, arg: nvgpu_sched_get_tsgs_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_GET_RECENT_TSGS, pointer(arg))


def nvgpu_sched_ioctl_get_tsgs_by_pid(fd: Any, arg: nvgpu_sched_get_tsgs_by_pid_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_GET_TSGS_BY_PID, pointer(arg))


def nvgpu_sched_ioctl_tsg_get_params(fd: Any, arg: nvgpu_sched_tsg_get_params_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_TSG_GET_PARAMS, pointer(arg))


def nvgpu_sched_ioctl_tsg_set_timeslice(fd: Any, arg: nvgpu_sched_tsg_timeslice_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_TSG_SET_TIMESLICE, pointer(arg))


def nvgpu_sched_ioctl_tsg_set_runlist_interleave(fd: Any, arg: nvgpu_sched_tsg_runlist_interleave_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_TSG_SET_RUNLIST_INTERLEAVE, pointer(arg))


def nvgpu_sched_ioctl_get_api_version(fd: Any, arg: nvgpu_sched_api_version_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_GET_API_VERSION, pointer(arg))


def nvgpu_sched_ioctl_get_tsg(fd: Any, arg: nvgpu_sched_tsg_refcount_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_GET_TSG, pointer(arg))


def nvgpu_sched_ioctl_put_tsg(fd: Any, arg: nvgpu_sched_tsg_refcount_args) -> int:
    return ioctl(fd, NVGPU_SCHED_IOCTL_PUT_TSG, pointer(arg))


