# AUTOGENERATED: DO NOT EDIT
# Last update date: 2022-02-04 16:15:56.670250

from ctypes import *
from utils import *


libc = CDLL('libc.so.6')
ioctl = libc.ioctl
NVMAP_ELEM_SIZE_U64: int = 0x80000000
NVMAP_IOC_MAGIC: int = 0x4E


class nvmap_create_handle_unamed_union_0_unamed_struct_0_unamed_union_0(Union):
    _fields_ = [
        ("size", c_uint),
        ("fd", c_int),
    ]


class nvmap_create_handle_unamed_union_0_unamed_struct_0(Structure):
    _fields_ = [
        ("unamed_field0", nvmap_create_handle_unamed_union_0_unamed_struct_0_unamed_union_0),
        ("handle", c_uint),
    ]


class nvmap_create_handle_unamed_union_0_unamed_struct_1_unamed_union_0(Union):
    _fields_ = [
        ("ivm_id", c_ulong),
        ("ivm_handle", c_int),
    ]


class nvmap_create_handle_unamed_union_0_unamed_struct_1(Structure):
    _fields_ = [
        ("unamed_field0", nvmap_create_handle_unamed_union_0_unamed_struct_1_unamed_union_0),
    ]


class nvmap_create_handle_unamed_union_0_unamed_struct_2_unamed_union_0(Union):
    _fields_ = [
        ("size64", c_ulong),
        ("handle64", c_uint),
    ]


class nvmap_create_handle_unamed_union_0_unamed_struct_2(Structure):
    _fields_ = [
        ("unamed_field0", nvmap_create_handle_unamed_union_0_unamed_struct_2_unamed_union_0),
    ]


class nvmap_create_handle_unamed_union_0(Union):
    _fields_ = [
        ("unamed_field0", nvmap_create_handle_unamed_union_0_unamed_struct_0),
        ("unamed_field1", nvmap_create_handle_unamed_union_0_unamed_struct_1),
        ("unamed_field2", nvmap_create_handle_unamed_union_0_unamed_struct_2),
    ]


class nvmap_create_handle(Structure):
    _fields_ = [
        ("unamed_field0", nvmap_create_handle_unamed_union_0),
    ]


class nvmap_create_handle_from_va_unamed_union_3(Union):
    _fields_ = [
        ("handle", c_uint),
        ("size64", c_ulong),
    ]


class nvmap_create_handle_from_va(Structure):
    _fields_ = [
        ("va", c_ulong),
        ("size", c_uint),
        ("flags", c_uint),
        ("unamed_field0", nvmap_create_handle_from_va_unamed_union_3),
    ]


class nvmap_gup_test(Structure):
    _fields_ = [
        ("va", c_ulong),
        ("handle", c_uint),
        ("result", c_uint),
    ]


class nvmap_alloc_handle(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("heap_mask", c_uint),
        ("flags", c_uint),
        ("align", c_uint),
    ]


class nvmap_alloc_ivm_handle(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("heap_mask", c_uint),
        ("flags", c_uint),
        ("align", c_uint),
        ("peer", c_uint),
    ]


class nvmap_alloc_kind_handle(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("heap_mask", c_uint),
        ("flags", c_uint),
        ("align", c_uint),
        ("kind", c_ubyte),
        ("comp_tags", c_ubyte),
    ]


class nvmap_map_caller(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("offset", c_uint),
        ("length", c_uint),
        ("flags", c_uint),
        ("addr", c_ulong),
    ]


class nvmap_rw_handle(Structure):
    _fields_ = [
        ("addr", c_ulong),
        ("handle", c_uint),
        ("offset", c_uint),
        ("elem_size", c_uint),
        ("hmem_stride", c_uint),
        ("user_stride", c_uint),
        ("count", c_uint),
    ]


class nvmap_rw_handle_64(Structure):
    _fields_ = [
        ("addr", c_ulong),
        ("handle", c_uint),
        ("offset", c_ulong),
        ("elem_size", c_ulong),
        ("hmem_stride", c_ulong),
        ("user_stride", c_ulong),
        ("count", c_ulong),
    ]


class nvmap_pin_handle(Structure):
    _fields_ = [
        ("handles", POINTER(c_uint)),
        ("addr", POINTER(c_ulong)),
        ("count", c_uint),
    ]


class nvmap_handle_param(Structure):
    _fields_ = [
        ("handle", c_uint),
        ("param", c_uint),
        ("result", c_ulong),
    ]


class nvmap_cache_op(Structure):
    _fields_ = [
        ("addr", c_ulong),
        ("handle", c_uint),
        ("len", c_uint),
        ("op", c_int),
    ]


class nvmap_cache_op_64(Structure):
    _fields_ = [
        ("addr", c_ulong),
        ("handle", c_uint),
        ("len", c_ulong),
        ("op", c_int),
    ]


class nvmap_cache_op_list(Structure):
    _fields_ = [
        ("handles", c_ulong),
        ("offsets", c_ulong),
        ("sizes", c_ulong),
        ("nr", c_uint),
        ("op", c_int),
    ]


class nvmap_debugfs_handles_header(Structure):
    _fields_ = [
        ("version", c_ubyte),
    ]


class nvmap_debugfs_handles_entry(Structure):
    _fields_ = [
        ("base", c_ulong),
        ("size", c_ulong),
        ("flags", c_uint),
        ("share_count", c_uint),
        ("mapped_size", c_ulong),
    ]


class nvmap_set_tag_label(Structure):
    _fields_ = [
        ("tag", c_uint),
        ("len", c_uint),
        ("addr", c_ulong),
    ]


class nvmap_available_heaps(Structure):
    _fields_ = [
        ("heaps", c_ulong),
    ]


class nvmap_heap_size(Structure):
    _fields_ = [
        ("heap", c_uint),
        ("size", c_ulong),
    ]


class nvmap_query_heap_params(Structure):
    _fields_ = [
        ("heap_mask", c_uint),
        ("flags", c_uint),
        ("contig", c_ubyte),
        ("total", c_ulong),
        ("free", c_ulong),
        ("largest_free_block", c_ulong),
    ]


class nvmap_handle_parameters(Structure):
    _fields_ = [
        ("contig", c_ubyte),
        ("import_id", c_uint),
        ("handle", c_uint),
        ("heap_number", c_uint),
        ("access_flags", c_uint),
        ("heap", c_ulong),
        ("align", c_ulong),
        ("coherency", c_ulong),
        ("size", c_ulong),
    ]


NVMAP_IOC_FREE = IO(78, 4)
NVMAP_IOC_GET_IVM_HEAPS = IOR(78, 21, c_uint)
NVMAP_IOC_VPR_FLOOR_SIZE = IOW(78, 102, c_uint)
NVMAP_IOC_CREATE = IOWR(78, 0, nvmap_create_handle)
NVMAP_IOC_CREATE_64 = IOWR(78, 1, nvmap_create_handle)
NVMAP_IOC_FROM_ID = IOWR(78, 2, nvmap_create_handle)
NVMAP_IOC_ALLOC = IOW(78, 3, nvmap_alloc_handle)
NVMAP_IOC_MMAP = IOWR(78, 5, nvmap_map_caller)
NVMAP_IOC_WRITE = IOW(78, 6, nvmap_rw_handle)
NVMAP_IOC_READ = IOW(78, 7, nvmap_rw_handle)
NVMAP_IOC_WRITE_64 = IOW(78, 6, nvmap_rw_handle_64)
NVMAP_IOC_READ_64 = IOW(78, 7, nvmap_rw_handle_64)
NVMAP_IOC_PARAM = IOWR(78, 8, nvmap_handle_param)
NVMAP_IOC_PIN_MULT = IOWR(78, 10, nvmap_pin_handle)
NVMAP_IOC_UNPIN_MULT = IOW(78, 11, nvmap_pin_handle)
NVMAP_IOC_CACHE = IOW(78, 12, nvmap_cache_op)
NVMAP_IOC_CACHE_64 = IOW(78, 12, nvmap_cache_op_64)
NVMAP_IOC_GET_ID = IOWR(78, 13, nvmap_create_handle)
NVMAP_IOC_SHARE = IOWR(78, 14, nvmap_create_handle)
NVMAP_IOC_GET_FD = IOWR(78, 15, nvmap_create_handle)
NVMAP_IOC_FROM_FD = IOWR(78, 16, nvmap_create_handle)
NVMAP_IOC_CACHE_LIST = IOW(78, 17, nvmap_cache_op_list)
NVMAP_IOC_RESERVE = IOW(78, 18, nvmap_cache_op_list)
NVMAP_IOC_FROM_IVC_ID = IOWR(78, 19, nvmap_create_handle)
NVMAP_IOC_GET_IVC_ID = IOWR(78, 20, nvmap_create_handle)
NVMAP_IOC_FROM_VA = IOWR(78, 22, nvmap_create_handle_from_va)
NVMAP_IOC_GUP_TEST = IOWR(78, 23, nvmap_gup_test)
NVMAP_IOC_SET_TAG_LABEL = IOW(78, 24, nvmap_set_tag_label)
NVMAP_IOC_GET_AVAILABLE_HEAPS = IOR(78, 25, nvmap_available_heaps)
NVMAP_IOC_GET_HEAP_SIZE = IOR(78, 26, nvmap_heap_size)
NVMAP_IOC_PARAMETERS = IOR(78, 27, nvmap_handle_parameters)
NVMAP_IOC_ALLOC_KIND = IOW(78, 100, nvmap_alloc_kind_handle)
NVMAP_IOC_ALLOC_IVM = IOW(78, 101, nvmap_alloc_ivm_handle)
NVMAP_IOC_QUERY_HEAP_PARAMS = IOR(78, 105, nvmap_query_heap_params)


def nvmap_ioc_free(fd: Any) -> int:
    return ioctl(fd, NVMAP_IOC_FREE)


def nvmap_ioc_get_ivm_heaps(fd: Any, arg: c_uint) -> int:
    return ioctl(fd, NVMAP_IOC_GET_IVM_HEAPS, pointer(arg))


def nvmap_ioc_vpr_floor_size(fd: Any, arg: c_uint) -> int:
    return ioctl(fd, NVMAP_IOC_VPR_FLOOR_SIZE, pointer(arg))


def nvmap_ioc_create(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_CREATE, pointer(arg))


def nvmap_ioc_create_64(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_CREATE_64, pointer(arg))


def nvmap_ioc_from_id(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_FROM_ID, pointer(arg))


def nvmap_ioc_alloc(fd: Any, arg: nvmap_alloc_handle) -> int:
    return ioctl(fd, NVMAP_IOC_ALLOC, pointer(arg))


def nvmap_ioc_mmap(fd: Any, arg: nvmap_map_caller) -> int:
    return ioctl(fd, NVMAP_IOC_MMAP, pointer(arg))


def nvmap_ioc_write(fd: Any, arg: nvmap_rw_handle) -> int:
    return ioctl(fd, NVMAP_IOC_WRITE, pointer(arg))


def nvmap_ioc_read(fd: Any, arg: nvmap_rw_handle) -> int:
    return ioctl(fd, NVMAP_IOC_READ, pointer(arg))


def nvmap_ioc_write_64(fd: Any, arg: nvmap_rw_handle_64) -> int:
    return ioctl(fd, NVMAP_IOC_WRITE_64, pointer(arg))


def nvmap_ioc_read_64(fd: Any, arg: nvmap_rw_handle_64) -> int:
    return ioctl(fd, NVMAP_IOC_READ_64, pointer(arg))


def nvmap_ioc_param(fd: Any, arg: nvmap_handle_param) -> int:
    return ioctl(fd, NVMAP_IOC_PARAM, pointer(arg))


def nvmap_ioc_pin_mult(fd: Any, arg: nvmap_pin_handle) -> int:
    return ioctl(fd, NVMAP_IOC_PIN_MULT, pointer(arg))


def nvmap_ioc_unpin_mult(fd: Any, arg: nvmap_pin_handle) -> int:
    return ioctl(fd, NVMAP_IOC_UNPIN_MULT, pointer(arg))


def nvmap_ioc_cache(fd: Any, arg: nvmap_cache_op) -> int:
    return ioctl(fd, NVMAP_IOC_CACHE, pointer(arg))


def nvmap_ioc_cache_64(fd: Any, arg: nvmap_cache_op_64) -> int:
    return ioctl(fd, NVMAP_IOC_CACHE_64, pointer(arg))


def nvmap_ioc_get_id(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_GET_ID, pointer(arg))


def nvmap_ioc_share(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_SHARE, pointer(arg))


def nvmap_ioc_get_fd(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_GET_FD, pointer(arg))


def nvmap_ioc_from_fd(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_FROM_FD, pointer(arg))


def nvmap_ioc_cache_list(fd: Any, arg: nvmap_cache_op_list) -> int:
    return ioctl(fd, NVMAP_IOC_CACHE_LIST, pointer(arg))


def nvmap_ioc_reserve(fd: Any, arg: nvmap_cache_op_list) -> int:
    return ioctl(fd, NVMAP_IOC_RESERVE, pointer(arg))


def nvmap_ioc_from_ivc_id(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_FROM_IVC_ID, pointer(arg))


def nvmap_ioc_get_ivc_id(fd: Any, arg: nvmap_create_handle) -> int:
    return ioctl(fd, NVMAP_IOC_GET_IVC_ID, pointer(arg))


def nvmap_ioc_from_va(fd: Any, arg: nvmap_create_handle_from_va) -> int:
    return ioctl(fd, NVMAP_IOC_FROM_VA, pointer(arg))


def nvmap_ioc_gup_test(fd: Any, arg: nvmap_gup_test) -> int:
    return ioctl(fd, NVMAP_IOC_GUP_TEST, pointer(arg))


def nvmap_ioc_set_tag_label(fd: Any, arg: nvmap_set_tag_label) -> int:
    return ioctl(fd, NVMAP_IOC_SET_TAG_LABEL, pointer(arg))


def nvmap_ioc_get_available_heaps(fd: Any, arg: nvmap_available_heaps) -> int:
    return ioctl(fd, NVMAP_IOC_GET_AVAILABLE_HEAPS, pointer(arg))


def nvmap_ioc_get_heap_size(fd: Any, arg: nvmap_heap_size) -> int:
    return ioctl(fd, NVMAP_IOC_GET_HEAP_SIZE, pointer(arg))


def nvmap_ioc_parameters(fd: Any, arg: nvmap_handle_parameters) -> int:
    return ioctl(fd, NVMAP_IOC_PARAMETERS, pointer(arg))


def nvmap_ioc_alloc_kind(fd: Any, arg: nvmap_alloc_kind_handle) -> int:
    return ioctl(fd, NVMAP_IOC_ALLOC_KIND, pointer(arg))


def nvmap_ioc_alloc_ivm(fd: Any, arg: nvmap_alloc_ivm_handle) -> int:
    return ioctl(fd, NVMAP_IOC_ALLOC_IVM, pointer(arg))


def nvmap_ioc_query_heap_params(fd: Any, arg: nvmap_query_heap_params) -> int:
    return ioctl(fd, NVMAP_IOC_QUERY_HEAP_PARAMS, pointer(arg))


