# AUTOGENERATED: DO NOT EDIT
# Last update date: 2022-11-12 16:49:05.243357

from ctypes import *
from utils import *


TURING_CHANNEL_GPFIFO_A: int = 0xC46F
NVC46F_NUMBER_OF_SUBCHANNELS: int = 0x8
NVC46F_SET_OBJECT: int = 0x0
NVC46F_SET_OBJECT_ENGINE_SW: int = 0x1F
NVC46F_ILLEGAL: int = 0x4
NVC46F_NOP: int = 0x8
NVC46F_SEMAPHOREA: int = 0x10
NVC46F_SEMAPHOREB: int = 0x14
NVC46F_SEMAPHOREC: int = 0x18
NVC46F_SEMAPHORED: int = 0x1C
NVC46F_SEMAPHORED_OPERATION_ACQUIRE: int = 0x1
NVC46F_SEMAPHORED_OPERATION_RELEASE: int = 0x2
NVC46F_SEMAPHORED_OPERATION_ACQ_GEQ: int = 0x4
NVC46F_SEMAPHORED_OPERATION_ACQ_AND: int = 0x8
NVC46F_SEMAPHORED_OPERATION_REDUCTION: int = 0x10
NVC46F_SEMAPHORED_ACQUIRE_SWITCH_DISABLED: int = 0x0
NVC46F_SEMAPHORED_ACQUIRE_SWITCH_ENABLED: int = 0x1
NVC46F_SEMAPHORED_RELEASE_WFI_EN: int = 0x0
NVC46F_SEMAPHORED_RELEASE_WFI_DIS: int = 0x1
NVC46F_SEMAPHORED_RELEASE_SIZE_16BYTE: int = 0x0
NVC46F_SEMAPHORED_RELEASE_SIZE_4BYTE: int = 0x1
NVC46F_SEMAPHORED_REDUCTION_MIN: int = 0x0
NVC46F_SEMAPHORED_REDUCTION_MAX: int = 0x1
NVC46F_SEMAPHORED_REDUCTION_XOR: int = 0x2
NVC46F_SEMAPHORED_REDUCTION_AND: int = 0x3
NVC46F_SEMAPHORED_REDUCTION_OR: int = 0x4
NVC46F_SEMAPHORED_REDUCTION_ADD: int = 0x5
NVC46F_SEMAPHORED_REDUCTION_INC: int = 0x6
NVC46F_SEMAPHORED_REDUCTION_DEC: int = 0x7
NVC46F_SEMAPHORED_FORMAT_SIGNED: int = 0x0
NVC46F_SEMAPHORED_FORMAT_UNSIGNED: int = 0x1
NVC46F_NON_STALL_INTERRUPT: int = 0x20
NVC46F_FB_FLUSH: int = 0x24
NVC46F_MEM_OP_A: int = 0x28
NVC46F_MEM_OP_A_TLB_INVALIDATE_SYSMEMBAR_EN: int = 0x1
NVC46F_MEM_OP_A_TLB_INVALIDATE_SYSMEMBAR_DIS: int = 0x0
NVC46F_MEM_OP_B: int = 0x2C
NVC46F_MEM_OP_C: int = 0x30
NVC46F_MEM_OP_C_MEMBAR_TYPE_SYS_MEMBAR: int = 0x0
NVC46F_MEM_OP_C_MEMBAR_TYPE_MEMBAR: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_ONE: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_ALL: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_GPC_ENABLE: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_GPC_DISABLE: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY_NONE: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY_START: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY_START_ACK_ALL: int = 0x2
NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY_CANCEL_TARGETED: int = 0x3
NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY_CANCEL_GLOBAL: int = 0x4
NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY_CANCEL_VA_GLOBAL: int = 0x5
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACK_TYPE_NONE: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACK_TYPE_GLOBALLY: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACK_TYPE_INTRANODE: int = 0x2
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_READ: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_WRITE: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_ATOMIC_STRONG: int = 0x2
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_RSVRVD: int = 0x3
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_ATOMIC_WEAK: int = 0x4
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_ATOMIC_ALL: int = 0x5
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_WRITE_AND_ATOMIC: int = 0x6
NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE_VIRT_ALL: int = 0x7
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_ALL: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_PTE_ONLY: int = 0x1
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_UP_TO_PDE0: int = 0x2
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_UP_TO_PDE1: int = 0x3
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_UP_TO_PDE2: int = 0x4
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_UP_TO_PDE3: int = 0x5
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_UP_TO_PDE4: int = 0x6
NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL_UP_TO_PDE5: int = 0x7
NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_APERTURE_VID_MEM: int = 0x0
NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_APERTURE_SYS_MEM_COHERENT: int = 0x2
NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_APERTURE_SYS_MEM_NONCOHERENT: int = 0x3
NVC46F_MEM_OP_D: int = 0x34
NVC46F_MEM_OP_D_OPERATION_MEMBAR: int = 0x5
NVC46F_MEM_OP_D_OPERATION_MMU_TLB_INVALIDATE: int = 0x9
NVC46F_MEM_OP_D_OPERATION_MMU_TLB_INVALIDATE_TARGETED: int = 0xA
NVC46F_MEM_OP_D_OPERATION_L2_PEERMEM_INVALIDATE: int = 0xD
NVC46F_MEM_OP_D_OPERATION_L2_SYSMEM_INVALIDATE: int = 0xE
NVC46F_MEM_OP_B_OPERATION_L2_INVALIDATE_CLEAN_LINES: int = 0xE
NVC46F_MEM_OP_D_OPERATION_L2_CLEAN_COMPTAGS: int = 0xF
NVC46F_MEM_OP_D_OPERATION_L2_FLUSH_DIRTY: int = 0x10
NVC46F_MEM_OP_D_OPERATION_L2_WAIT_FOR_SYS_PENDING_READS: int = 0x15
NVC46F_MEM_OP_D_OPERATION_ACCESS_COUNTER_CLR: int = 0x16
NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TYPE_MIMC: int = 0x0
NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TYPE_MOMC: int = 0x1
NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TYPE_ALL: int = 0x2
NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TYPE_TARGETED: int = 0x3
NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TARGETED_TYPE_MIMC: int = 0x0
NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TARGETED_TYPE_MOMC: int = 0x1
NVC46F_SET_REFERENCE: int = 0x50
NVC46F_SEM_ADDR_LO: int = 0x5C
NVC46F_SEM_ADDR_HI: int = 0x60
NVC46F_SEM_PAYLOAD_LO: int = 0x64
NVC46F_SEM_PAYLOAD_HI: int = 0x68
NVC46F_SEM_EXECUTE: int = 0x6C
NVC46F_SEM_EXECUTE_OPERATION_ACQUIRE: int = 0x0
NVC46F_SEM_EXECUTE_OPERATION_RELEASE: int = 0x1
NVC46F_SEM_EXECUTE_OPERATION_ACQ_STRICT_GEQ: int = 0x2
NVC46F_SEM_EXECUTE_OPERATION_ACQ_CIRC_GEQ: int = 0x3
NVC46F_SEM_EXECUTE_OPERATION_ACQ_AND: int = 0x4
NVC46F_SEM_EXECUTE_OPERATION_ACQ_NOR: int = 0x5
NVC46F_SEM_EXECUTE_OPERATION_REDUCTION: int = 0x6
NVC46F_SEM_EXECUTE_ACQUIRE_SWITCH_TSG_DIS: int = 0x0
NVC46F_SEM_EXECUTE_ACQUIRE_SWITCH_TSG_EN: int = 0x1
NVC46F_SEM_EXECUTE_RELEASE_WFI_DIS: int = 0x0
NVC46F_SEM_EXECUTE_RELEASE_WFI_EN: int = 0x1
NVC46F_SEM_EXECUTE_PAYLOAD_SIZE_32BIT: int = 0x0
NVC46F_SEM_EXECUTE_PAYLOAD_SIZE_64BIT: int = 0x1
NVC46F_SEM_EXECUTE_RELEASE_TIMESTAMP_DIS: int = 0x0
NVC46F_SEM_EXECUTE_RELEASE_TIMESTAMP_EN: int = 0x1
NVC46F_SEM_EXECUTE_REDUCTION_IMIN: int = 0x0
NVC46F_SEM_EXECUTE_REDUCTION_IMAX: int = 0x1
NVC46F_SEM_EXECUTE_REDUCTION_IXOR: int = 0x2
NVC46F_SEM_EXECUTE_REDUCTION_IAND: int = 0x3
NVC46F_SEM_EXECUTE_REDUCTION_IOR: int = 0x4
NVC46F_SEM_EXECUTE_REDUCTION_IADD: int = 0x5
NVC46F_SEM_EXECUTE_REDUCTION_INC: int = 0x6
NVC46F_SEM_EXECUTE_REDUCTION_DEC: int = 0x7
NVC46F_SEM_EXECUTE_REDUCTION_FORMAT_SIGNED: int = 0x0
NVC46F_SEM_EXECUTE_REDUCTION_FORMAT_UNSIGNED: int = 0x1
NVC46F_WFI: int = 0x78
NVC46F_WFI_SCOPE_CURRENT_SCG_TYPE: int = 0x0
NVC46F_WFI_SCOPE_CURRENT_VEID: int = 0x0
NVC46F_WFI_SCOPE_ALL: int = 0x1
NVC46F_CRC_CHECK: int = 0x7C
NVC46F_YIELD: int = 0x80
NVC46F_YIELD_OP_NOP: int = 0x0
NVC46F_YIELD_OP_RUNLIST_TIMESLICE: int = 0x2
NVC46F_YIELD_OP_TSG: int = 0x3
NVC46F_CLEAR_FAULTED: int = 0x84
NVC46F_CLEAR_FAULTED_TYPE_PBDMA_FAULTED: int = 0x0
NVC46F_CLEAR_FAULTED_TYPE_ENG_FAULTED: int = 0x1
NVC46F_GP_ENTRY__SIZE: int = 0x8
NVC46F_GP_ENTRY0_FETCH_UNCONDITIONAL: int = 0x0
NVC46F_GP_ENTRY0_FETCH_CONDITIONAL: int = 0x1
NVC46F_GP_ENTRY1_LEVEL_MAIN: int = 0x0
NVC46F_GP_ENTRY1_LEVEL_SUBROUTINE: int = 0x1
NVC46F_GP_ENTRY1_SYNC_PROCEED: int = 0x0
NVC46F_GP_ENTRY1_SYNC_WAIT: int = 0x1
NVC46F_GP_ENTRY1_OPCODE_NOP: int = 0x0
NVC46F_GP_ENTRY1_OPCODE_ILLEGAL: int = 0x1
NVC46F_GP_ENTRY1_OPCODE_GP_CRC: int = 0x2
NVC46F_GP_ENTRY1_OPCODE_PB_CRC: int = 0x3
NVC46F_DMA_TERT_OP_GRP0_INC_METHOD: int = 0x0
NVC46F_DMA_TERT_OP_GRP0_SET_SUB_DEV_MASK: int = 0x1
NVC46F_DMA_TERT_OP_GRP0_STORE_SUB_DEV_MASK: int = 0x2
NVC46F_DMA_TERT_OP_GRP0_USE_SUB_DEV_MASK: int = 0x3
NVC46F_DMA_TERT_OP_GRP2_NON_INC_METHOD: int = 0x0
NVC46F_DMA_SEC_OP_GRP0_USE_TERT: int = 0x0
NVC46F_DMA_SEC_OP_INC_METHOD: int = 0x1
NVC46F_DMA_SEC_OP_GRP2_USE_TERT: int = 0x2
NVC46F_DMA_SEC_OP_NON_INC_METHOD: int = 0x3
NVC46F_DMA_SEC_OP_IMMD_DATA_METHOD: int = 0x4
NVC46F_DMA_SEC_OP_ONE_INC: int = 0x5
NVC46F_DMA_SEC_OP_RESERVED6: int = 0x6
NVC46F_DMA_SEC_OP_END_PB_SEGMENT: int = 0x7
NVC46F_DMA_INCR_OPCODE_VALUE: int = 0x1
NVC46F_DMA_NONINCR_OPCODE_VALUE: int = 0x3
NVC46F_DMA_ONEINCR_OPCODE_VALUE: int = 0x5
NVC46F_DMA_NOP: int = 0x0
NVC46F_DMA_IMMD_OPCODE_VALUE: int = 0x4
NVC46F_DMA_SET_SUBDEVICE_MASK_OPCODE_VALUE: int = 0x1
NVC46F_DMA_STORE_SUBDEVICE_MASK_OPCODE_VALUE: int = 0x2
NVC46F_DMA_USE_SUBDEVICE_MASK_OPCODE_VALUE: int = 0x3
NVC46F_DMA_ENDSEG_OPCODE_VALUE: int = 0x7
NVC46F_DMA_OPCODE3_NONE: int = 0x0
NVC46F_DMA_OPCODE_METHOD: int = 0x0
NVC46F_DMA_OPCODE_NONINC_METHOD: int = 0x2


def NVC46F_SET_OBJECT_NVCLASS(value: int) -> int:
    return set_bits(0, 15, value)


def NVC46F_SET_OBJECT_ENGINE(value: int) -> int:
    return set_bits(16, 4, value)


def NVC46F_ILLEGAL_HANDLE(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_NOP_HANDLE(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_SEMAPHOREA_OFFSET_UPPER(value: int) -> int:
    return set_bits(0, 7, value)


def NVC46F_SEMAPHOREB_OFFSET_LOWER(value: int) -> int:
    return set_bits(2, 29, value)


def NVC46F_SEMAPHOREC_PAYLOAD(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_SEMAPHORED_OPERATION(value: int) -> int:
    return set_bits(0, 4, value)


def NVC46F_SEMAPHORED_ACQUIRE_SWITCH(value: int) -> int:
    return set_bits(12, 0, value)


def NVC46F_SEMAPHORED_RELEASE_WFI(value: int) -> int:
    return set_bits(20, 0, value)


def NVC46F_SEMAPHORED_RELEASE_SIZE(value: int) -> int:
    return set_bits(24, 0, value)


def NVC46F_SEMAPHORED_REDUCTION(value: int) -> int:
    return set_bits(27, 3, value)


def NVC46F_SEMAPHORED_FORMAT(value: int) -> int:
    return set_bits(31, 0, value)


def NVC46F_NON_STALL_INTERRUPT_HANDLE(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_FB_FLUSH_HANDLE(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_MEM_OP_A_TLB_INVALIDATE_CANCEL_TARGET_CLIENT_UNIT_ID(value: int) -> int:
    return set_bits(0, 5, value)


def NVC46F_MEM_OP_A_TLB_INVALIDATE_INVALIDATION_SIZE(value: int) -> int:
    return set_bits(0, 5, value)


def NVC46F_MEM_OP_A_TLB_INVALIDATE_CANCEL_TARGET_GPC_ID(value: int) -> int:
    return set_bits(6, 4, value)


def NVC46F_MEM_OP_A_TLB_INVALIDATE_CANCEL_MMU_ENGINE_ID(value: int) -> int:
    return set_bits(0, 6, value)


def NVC46F_MEM_OP_A_TLB_INVALIDATE_SYSMEMBAR(value: int) -> int:
    return set_bits(11, 0, value)


def NVC46F_MEM_OP_A_TLB_INVALIDATE_TARGET_ADDR_LO(value: int) -> int:
    return set_bits(12, 19, value)


def NVC46F_MEM_OP_B_TLB_INVALIDATE_TARGET_ADDR_HI(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_MEM_OP_C_MEMBAR_TYPE(value: int) -> int:
    return set_bits(0, 2, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB(value: int) -> int:
    return set_bits(0, 0, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_GPC(value: int) -> int:
    return set_bits(1, 0, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_REPLAY(value: int) -> int:
    return set_bits(2, 2, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_ACK_TYPE(value: int) -> int:
    return set_bits(5, 1, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_ACCESS_TYPE(value: int) -> int:
    return set_bits(7, 2, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_PAGE_TABLE_LEVEL(value: int) -> int:
    return set_bits(7, 2, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_APERTURE(value: int) -> int:
    return set_bits(10, 1, value)


def NVC46F_MEM_OP_C_TLB_INVALIDATE_PDB_ADDR_LO(value: int) -> int:
    return set_bits(12, 19, value)


def NVC46F_MEM_OP_C_ACCESS_COUNTER_CLR_TARGETED_NOTIFY_TAG(value: int) -> int:
    return set_bits(0, 19, value)


def NVC46F_MEM_OP_D_TLB_INVALIDATE_PDB_ADDR_HI(value: int) -> int:
    return set_bits(0, 26, value)


def NVC46F_MEM_OP_D_OPERATION(value: int) -> int:
    return set_bits(27, 4, value)


def NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TYPE(value: int) -> int:
    return set_bits(0, 1, value)


def NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TARGETED_TYPE(value: int) -> int:
    return set_bits(2, 0, value)


def NVC46F_MEM_OP_D_ACCESS_COUNTER_CLR_TARGETED_BANK(value: int) -> int:
    return set_bits(3, 3, value)


def NVC46F_SET_REFERENCE_COUNT(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_SEM_ADDR_LO_OFFSET(value: int) -> int:
    return set_bits(2, 29, value)


def NVC46F_SEM_ADDR_HI_OFFSET(value: int) -> int:
    return set_bits(0, 7, value)


def NVC46F_SEM_PAYLOAD_LO_PAYLOAD(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_SEM_PAYLOAD_HI_PAYLOAD(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_SEM_EXECUTE_OPERATION(value: int) -> int:
    return set_bits(0, 2, value)


def NVC46F_SEM_EXECUTE_ACQUIRE_SWITCH_TSG(value: int) -> int:
    return set_bits(12, 0, value)


def NVC46F_SEM_EXECUTE_RELEASE_WFI(value: int) -> int:
    return set_bits(20, 0, value)


def NVC46F_SEM_EXECUTE_PAYLOAD_SIZE(value: int) -> int:
    return set_bits(24, 0, value)


def NVC46F_SEM_EXECUTE_RELEASE_TIMESTAMP(value: int) -> int:
    return set_bits(25, 0, value)


def NVC46F_SEM_EXECUTE_REDUCTION(value: int) -> int:
    return set_bits(27, 3, value)


def NVC46F_SEM_EXECUTE_REDUCTION_FORMAT(value: int) -> int:
    return set_bits(31, 0, value)


def NVC46F_WFI_SCOPE(value: int) -> int:
    return set_bits(0, 0, value)


def NVC46F_CRC_CHECK_VALUE(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_YIELD_OP(value: int) -> int:
    return set_bits(0, 1, value)


def NVC46F_CLEAR_FAULTED_HANDLE(value: int) -> int:
    return set_bits(0, 30, value)


def NVC46F_CLEAR_FAULTED_TYPE(value: int) -> int:
    return set_bits(31, 0, value)


def NVC46F_GP_ENTRY0_FETCH(value: int) -> int:
    return set_bits(0, 0, value)


def NVC46F_GP_ENTRY0_GET(value: int) -> int:
    return set_bits(2, 29, value)


def NVC46F_GP_ENTRY0_OPERAND(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_GP_ENTRY1_GET_HI(value: int) -> int:
    return set_bits(0, 7, value)


def NVC46F_GP_ENTRY1_LEVEL(value: int) -> int:
    return set_bits(9, 0, value)


def NVC46F_GP_ENTRY1_LENGTH(value: int) -> int:
    return set_bits(10, 20, value)


def NVC46F_GP_ENTRY1_SYNC(value: int) -> int:
    return set_bits(31, 0, value)


def NVC46F_GP_ENTRY1_OPCODE(value: int) -> int:
    return set_bits(0, 7, value)


def NVC46F_DMA_METHOD_ADDRESS_OLD(value: int) -> int:
    return set_bits(2, 10, value)


def NVC46F_DMA_METHOD_ADDRESS(value: int) -> int:
    return set_bits(0, 11, value)


def NVC46F_DMA_SUBDEVICE_MASK(value: int) -> int:
    return set_bits(4, 11, value)


def NVC46F_DMA_METHOD_SUBCHANNEL(value: int) -> int:
    return set_bits(13, 2, value)


def NVC46F_DMA_TERT_OP(value: int) -> int:
    return set_bits(16, 1, value)


def NVC46F_DMA_METHOD_COUNT_OLD(value: int) -> int:
    return set_bits(18, 10, value)


def NVC46F_DMA_METHOD_COUNT(value: int) -> int:
    return set_bits(16, 12, value)


def NVC46F_DMA_IMMD_DATA(value: int) -> int:
    return set_bits(16, 12, value)


def NVC46F_DMA_SEC_OP(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_INCR_ADDRESS(value: int) -> int:
    return set_bits(0, 11, value)


def NVC46F_DMA_INCR_SUBCHANNEL(value: int) -> int:
    return set_bits(13, 2, value)


def NVC46F_DMA_INCR_COUNT(value: int) -> int:
    return set_bits(16, 12, value)


def NVC46F_DMA_INCR_OPCODE(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_INCR_DATA(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_DMA_NONINCR_ADDRESS(value: int) -> int:
    return set_bits(0, 11, value)


def NVC46F_DMA_NONINCR_SUBCHANNEL(value: int) -> int:
    return set_bits(13, 2, value)


def NVC46F_DMA_NONINCR_COUNT(value: int) -> int:
    return set_bits(16, 12, value)


def NVC46F_DMA_NONINCR_OPCODE(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_NONINCR_DATA(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_DMA_ONEINCR_ADDRESS(value: int) -> int:
    return set_bits(0, 11, value)


def NVC46F_DMA_ONEINCR_SUBCHANNEL(value: int) -> int:
    return set_bits(13, 2, value)


def NVC46F_DMA_ONEINCR_COUNT(value: int) -> int:
    return set_bits(16, 12, value)


def NVC46F_DMA_ONEINCR_OPCODE(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_ONEINCR_DATA(value: int) -> int:
    return set_bits(0, 31, value)


def NVC46F_DMA_IMMD_ADDRESS(value: int) -> int:
    return set_bits(0, 11, value)


def NVC46F_DMA_IMMD_SUBCHANNEL(value: int) -> int:
    return set_bits(13, 2, value)


def NVC46F_DMA_IMMD_DATA(value: int) -> int:
    return set_bits(16, 12, value)


def NVC46F_DMA_IMMD_OPCODE(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_SET_SUBDEVICE_MASK_VALUE(value: int) -> int:
    return set_bits(4, 11, value)


def NVC46F_DMA_SET_SUBDEVICE_MASK_OPCODE(value: int) -> int:
    return set_bits(16, 15, value)


def NVC46F_DMA_STORE_SUBDEVICE_MASK_VALUE(value: int) -> int:
    return set_bits(4, 11, value)


def NVC46F_DMA_STORE_SUBDEVICE_MASK_OPCODE(value: int) -> int:
    return set_bits(16, 15, value)


def NVC46F_DMA_USE_SUBDEVICE_MASK_OPCODE(value: int) -> int:
    return set_bits(16, 15, value)


def NVC46F_DMA_ENDSEG_OPCODE(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_ADDRESS(value: int) -> int:
    return set_bits(2, 10, value)


def NVC46F_DMA_SUBCH(value: int) -> int:
    return set_bits(13, 2, value)


def NVC46F_DMA_OPCODE3(value: int) -> int:
    return set_bits(16, 1, value)


def NVC46F_DMA_COUNT(value: int) -> int:
    return set_bits(18, 10, value)


def NVC46F_DMA_OPCODE(value: int) -> int:
    return set_bits(29, 2, value)


def NVC46F_DMA_DATA(value: int) -> int:
    return set_bits(0, 31, value)






class Nvc46fControl_struct(Structure):
    _fields_ = [
        ("Ignored00", c_int * 16),
        ("Put", c_int),
        ("Get", c_int),
        ("Reference", c_int),
        ("PutHi", c_int),
        ("Ignored01", c_int * 2),
        ("TopLevelGet", c_int),
        ("TopLevelGetHi", c_int),
        ("GetHi", c_int),
        ("Ignored02", c_int * 7),
        ("Ignored03", c_int),
        ("Ignored04", c_int * 1),
        ("GPGet", c_int),
        ("GPPut", c_int),
        ("Ignored05", c_int * 92),
    ]




